; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -mtriple=amdgcn-amd-amdhsa -infer-address-spaces %s | FileCheck %s

declare double @llvm.amdgcn.flat.atomic.fadd.f64.p0f64.f64(double* nocapture, double) #1
declare double @llvm.amdgcn.flat.atomic.fmin.f64.p0f64.f64(double* nocapture, double) #1
declare double @llvm.amdgcn.flat.atomic.fmax.f64.p0f64.f64(double* nocapture, double) #1

define protected amdgpu_kernel void @flat_atomic_add_to_global(double addrspace(1)* %a, double %b) {
; CHECK-LABEL: @flat_atomic_add_to_global(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RES:%.*]] = tail call contract double @llvm.amdgcn.flat.atomic.fadd.f64.p1f64.f64(double addrspace(1)* [[A:%.*]], double [[B:%.*]]) #[[ATTR1:[0-9]+]]
; CHECK-NEXT:    ret void
;
entry:
  %cast = addrspacecast double addrspace(1)* %a to double*
  %res = tail call contract double @llvm.amdgcn.flat.atomic.fadd.f64.p0f64.f64(double* %cast, double %b) #1
  ret void
}

define protected amdgpu_kernel void @flat_atomic_max_to_global(double addrspace(1)* %a, double %b) {
; CHECK-LABEL: @flat_atomic_max_to_global(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RES:%.*]] = tail call contract double @llvm.amdgcn.flat.atomic.fmax.f64.p1f64.f64(double addrspace(1)* [[A:%.*]], double [[B:%.*]]) #[[ATTR1]]
; CHECK-NEXT:    ret void
;
entry:
  %cast = addrspacecast double addrspace(1)* %a to double*
  %res = tail call contract double @llvm.amdgcn.flat.atomic.fmax.f64.p0f64.f64(double* %cast, double %b) #1
  ret void
}

define protected amdgpu_kernel void @flat_atomic_min_to_global(double addrspace(1)* %a, double %b) {
; CHECK-LABEL: @flat_atomic_min_to_global(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RES:%.*]] = tail call contract double @llvm.amdgcn.flat.atomic.fmin.f64.p1f64.f64(double addrspace(1)* [[A:%.*]], double [[B:%.*]]) #[[ATTR1]]
; CHECK-NEXT:    ret void
;
entry:
  %cast = addrspacecast double addrspace(1)* %a to double*
  %res = tail call contract double @llvm.amdgcn.flat.atomic.fmin.f64.p0f64.f64(double* %cast, double %b) #1
  ret void
}

attributes #1 = { argmemonly mustprogress nounwind willreturn }


