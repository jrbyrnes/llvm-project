; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=amdgcn -mcpu=gfx906 -amdgpu-coerce-illegal-types=1 < %s | FileCheck --check-prefix=FEATURE %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx906 < %s | FileCheck --check-prefix=DEFAULT %s

define amdgpu_kernel void @v3i8_liveout(ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst) {
; GFX906-LABEL: v3i8_liveout:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; GFX906-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; GFX906-NEXT:    v_lshlrev_b32_e32 v2, 2, v0
; GFX906-NEXT:    v_mov_b32_e32 v3, 8
; GFX906-NEXT:    v_mov_b32_e32 v1, 0
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dword v4, v2, s[4:5]
; GFX906-NEXT:    s_mov_b32 s4, 0xff0000
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    v_lshrrev_b32_sdwa v5, v3, v4 dst_sel:BYTE_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v5, v4, v5 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_and_b32_e32 v5, 0xffff, v5
; GFX906-NEXT:    v_and_or_b32 v4, v4, s4, v5
; GFX906-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB0_2
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    global_load_dword v0, v2, s[6:7]
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    v_lshrrev_b32_sdwa v2, v3, v0 dst_sel:BYTE_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v2, v0, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_and_b32_e32 v2, 0xffff, v2
; GFX906-NEXT:    v_and_or_b32 v4, v0, s4, v2
; GFX906-NEXT:  .LBB0_2: ; %bb.2
; GFX906-NEXT:    s_or_b64 exec, exec, s[0:1]
; GFX906-NEXT:    global_store_byte_d16_hi v1, v4, s[2:3] offset:2
; GFX906-NEXT:    global_store_short v1, v4, s[2:3]
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: v3i8_liveout:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; FEATURE-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; FEATURE-NEXT:    v_lshlrev_b32_e32 v2, 2, v0
; FEATURE-NEXT:    v_mov_b32_e32 v3, 8
; FEATURE-NEXT:    v_mov_b32_e32 v1, 0
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_load_dword v4, v2, s[4:5]
; FEATURE-NEXT:    s_mov_b32 s4, 0xff0000
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    v_lshrrev_b32_sdwa v5, v3, v4 dst_sel:BYTE_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; FEATURE-NEXT:    v_or_b32_sdwa v5, v4, v5 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_and_b32_e32 v5, 0xffff, v5
; FEATURE-NEXT:    v_and_or_b32 v4, v4, s4, v5
; FEATURE-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; FEATURE-NEXT:    s_cbranch_execz .LBB0_2
; FEATURE-NEXT:  ; %bb.1: ; %bb.1
; FEATURE-NEXT:    global_load_dword v0, v2, s[6:7]
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    v_lshrrev_b32_sdwa v2, v3, v0 dst_sel:BYTE_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; FEATURE-NEXT:    v_or_b32_sdwa v2, v0, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_and_b32_e32 v2, 0xffff, v2
; FEATURE-NEXT:    v_and_or_b32 v4, v0, s4, v2
; FEATURE-NEXT:  .LBB0_2: ; %bb.2
; FEATURE-NEXT:    s_or_b64 exec, exec, s[0:1]
; FEATURE-NEXT:    global_store_byte_d16_hi v1, v4, s[2:3] offset:2
; FEATURE-NEXT:    global_store_short v1, v4, s[2:3]
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: v3i8_liveout:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; DEFAULT-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v2, 2, v0
; DEFAULT-NEXT:    v_mov_b32_e32 v3, 8
; DEFAULT-NEXT:    v_mov_b32_e32 v1, 0
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_load_dword v4, v2, s[4:5]
; DEFAULT-NEXT:    s_mov_b32 s4, 0xff0000
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    v_lshrrev_b32_sdwa v5, v3, v4 dst_sel:BYTE_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; DEFAULT-NEXT:    v_or_b32_sdwa v5, v4, v5 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_and_b32_e32 v5, 0xffff, v5
; DEFAULT-NEXT:    v_and_or_b32 v4, v4, s4, v5
; DEFAULT-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; DEFAULT-NEXT:    s_cbranch_execz .LBB0_2
; DEFAULT-NEXT:  ; %bb.1: ; %bb.1
; DEFAULT-NEXT:    global_load_dword v0, v2, s[6:7]
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    v_lshrrev_b32_sdwa v2, v3, v0 dst_sel:BYTE_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; DEFAULT-NEXT:    v_or_b32_sdwa v2, v0, v2 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_and_b32_e32 v2, 0xffff, v2
; DEFAULT-NEXT:    v_and_or_b32 v4, v0, s4, v2
; DEFAULT-NEXT:  .LBB0_2: ; %bb.2
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[0:1]
; DEFAULT-NEXT:    global_store_byte_d16_hi v1, v4, s[2:3] offset:2
; DEFAULT-NEXT:    global_store_short v1, v4, s[2:3]
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <3 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <3 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <3 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <3 x i8>, ptr addrspace(1) %gep2
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
bb.1:
  br label %bb.2

bb.2:
  %tmp5 = phi <3 x i8> [ %vec1, %entry ], [ %vec2, %bb.1 ]
  store <3 x i8> %tmp5, ptr addrspace(1) %dst, align 4
  ret void
}

define amdgpu_kernel void @v4i8_liveout(ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst) {
; GFX906-LABEL: v4i8_liveout:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; GFX906-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; GFX906-NEXT:    v_lshlrev_b32_e32 v3, 2, v0
; GFX906-NEXT:    v_mov_b32_e32 v1, 0
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dword v2, v3, s[4:5]
; GFX906-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB1_2
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    global_load_dword v2, v3, s[6:7]
; GFX906-NEXT:  .LBB1_2: ; %bb.2
; GFX906-NEXT:    s_or_b64 exec, exec, s[0:1]
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    global_store_dword v1, v2, s[2:3]
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: v4i8_liveout:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; FEATURE-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; FEATURE-NEXT:    v_lshlrev_b32_e32 v3, 2, v0
; FEATURE-NEXT:    v_mov_b32_e32 v1, 0
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_load_dword v2, v3, s[4:5]
; FEATURE-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; FEATURE-NEXT:    s_cbranch_execz .LBB1_2
; FEATURE-NEXT:  ; %bb.1: ; %bb.1
; FEATURE-NEXT:    global_load_dword v2, v3, s[6:7]
; FEATURE-NEXT:  .LBB1_2: ; %bb.2
; FEATURE-NEXT:    s_or_b64 exec, exec, s[0:1]
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    global_store_dword v1, v2, s[2:3]
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: v4i8_liveout:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; DEFAULT-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v3, 2, v0
; DEFAULT-NEXT:    v_mov_b32_e32 v1, 0
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_load_dword v2, v3, s[4:5]
; DEFAULT-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; DEFAULT-NEXT:    s_cbranch_execz .LBB1_2
; DEFAULT-NEXT:  ; %bb.1: ; %bb.1
; DEFAULT-NEXT:    global_load_dword v2, v3, s[6:7]
; DEFAULT-NEXT:  .LBB1_2: ; %bb.2
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[0:1]
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    global_store_dword v1, v2, s[2:3]
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <4 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <4 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <4 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <4 x i8>, ptr addrspace(1) %gep2
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
bb.1:
  br label %bb.2

bb.2:
  %tmp5 = phi <4 x i8> [ %vec1, %entry ], [ %vec2, %bb.1 ]
  store <4 x i8> %tmp5, ptr addrspace(1) %dst, align 4
  ret void
}

define amdgpu_kernel void @v5i8_liveout(ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst) {
; GFX906-LABEL: v5i8_liveout:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; GFX906-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; GFX906-NEXT:    v_lshlrev_b32_e32 v4, 3, v0
; GFX906-NEXT:    v_mov_b32_e32 v3, 0
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dwordx2 v[1:2], v4, s[4:5]
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    v_and_b32_e32 v2, 0xff, v2
; GFX906-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB2_2
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    global_load_dwordx2 v[1:2], v4, s[6:7]
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    v_and_b32_e32 v2, 0xff, v2
; GFX906-NEXT:  .LBB2_2: ; %bb.2
; GFX906-NEXT:    s_or_b64 exec, exec, s[0:1]
; GFX906-NEXT:    global_store_byte v3, v2, s[2:3] offset:4
; GFX906-NEXT:    global_store_dword v3, v1, s[2:3]
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: v5i8_liveout:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; FEATURE-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; FEATURE-NEXT:    v_lshlrev_b32_e32 v4, 3, v0
; FEATURE-NEXT:    v_mov_b32_e32 v3, 0
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_load_dwordx2 v[1:2], v4, s[4:5]
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    v_and_b32_e32 v2, 0xff, v2
; FEATURE-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; FEATURE-NEXT:    s_cbranch_execz .LBB2_2
; FEATURE-NEXT:  ; %bb.1: ; %bb.1
; FEATURE-NEXT:    global_load_dwordx2 v[1:2], v4, s[6:7]
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    v_and_b32_e32 v2, 0xff, v2
; FEATURE-NEXT:  .LBB2_2: ; %bb.2
; FEATURE-NEXT:    s_or_b64 exec, exec, s[0:1]
; FEATURE-NEXT:    global_store_byte v3, v2, s[2:3] offset:4
; FEATURE-NEXT:    global_store_dword v3, v1, s[2:3]
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: v5i8_liveout:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; DEFAULT-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v4, 3, v0
; DEFAULT-NEXT:    v_mov_b32_e32 v3, 0
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_load_dwordx2 v[1:2], v4, s[4:5]
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    v_and_b32_e32 v2, 0xff, v2
; DEFAULT-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; DEFAULT-NEXT:    s_cbranch_execz .LBB2_2
; DEFAULT-NEXT:  ; %bb.1: ; %bb.1
; DEFAULT-NEXT:    global_load_dwordx2 v[1:2], v4, s[6:7]
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    v_and_b32_e32 v2, 0xff, v2
; DEFAULT-NEXT:  .LBB2_2: ; %bb.2
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[0:1]
; DEFAULT-NEXT:    global_store_byte v3, v2, s[2:3] offset:4
; DEFAULT-NEXT:    global_store_dword v3, v1, s[2:3]
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <5 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <5 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <5 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <5 x i8>, ptr addrspace(1) %gep2
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
bb.1:
  br label %bb.2

bb.2:
  %tmp5 = phi <5 x i8> [ %vec1, %entry ], [ %vec2, %bb.1 ]
  store <5 x i8> %tmp5, ptr addrspace(1) %dst, align 4
  ret void
}

define amdgpu_kernel void @v8i8_liveout(ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst) {
; GFX906-LABEL: v8i8_liveout:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; GFX906-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; GFX906-NEXT:    v_lshlrev_b32_e32 v4, 3, v0
; GFX906-NEXT:    v_mov_b32_e32 v3, 0
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dwordx2 v[1:2], v4, s[4:5]
; GFX906-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB3_2
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    global_load_dwordx2 v[1:2], v4, s[6:7]
; GFX906-NEXT:  .LBB3_2: ; %bb.2
; GFX906-NEXT:    s_or_b64 exec, exec, s[0:1]
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    global_store_dwordx2 v3, v[1:2], s[2:3]
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: v8i8_liveout:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; FEATURE-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; FEATURE-NEXT:    v_lshlrev_b32_e32 v4, 3, v0
; FEATURE-NEXT:    v_mov_b32_e32 v3, 0
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_load_dwordx2 v[1:2], v4, s[4:5]
; FEATURE-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; FEATURE-NEXT:    s_cbranch_execz .LBB3_2
; FEATURE-NEXT:  ; %bb.1: ; %bb.1
; FEATURE-NEXT:    global_load_dwordx2 v[1:2], v4, s[6:7]
; FEATURE-NEXT:  .LBB3_2: ; %bb.2
; FEATURE-NEXT:    s_or_b64 exec, exec, s[0:1]
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    global_store_dwordx2 v3, v[1:2], s[2:3]
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: v8i8_liveout:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; DEFAULT-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v4, 3, v0
; DEFAULT-NEXT:    v_mov_b32_e32 v3, 0
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_load_dwordx2 v[1:2], v4, s[4:5]
; DEFAULT-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; DEFAULT-NEXT:    s_cbranch_execz .LBB3_2
; DEFAULT-NEXT:  ; %bb.1: ; %bb.1
; DEFAULT-NEXT:    global_load_dwordx2 v[1:2], v4, s[6:7]
; DEFAULT-NEXT:  .LBB3_2: ; %bb.2
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[0:1]
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    global_store_dwordx2 v3, v[1:2], s[2:3]
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <8 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <8 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <8 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <8 x i8>, ptr addrspace(1) %gep2
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
bb.1:
  br label %bb.2

bb.2:
  %tmp5 = phi <8 x i8> [ %vec1, %entry ], [ %vec2, %bb.1 ]
  store <8 x i8> %tmp5, ptr addrspace(1) %dst, align 4
  ret void
}

define amdgpu_kernel void @v16i8_liveout(ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst) {
; GFX906-LABEL: v16i8_liveout:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; GFX906-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; GFX906-NEXT:    v_lshlrev_b32_e32 v6, 4, v0
; GFX906-NEXT:    v_mov_b32_e32 v5, 0
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dwordx4 v[1:4], v6, s[4:5]
; GFX906-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB4_2
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    global_load_dwordx4 v[1:4], v6, s[6:7]
; GFX906-NEXT:  .LBB4_2: ; %bb.2
; GFX906-NEXT:    s_or_b64 exec, exec, s[0:1]
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    global_store_dwordx4 v5, v[1:4], s[2:3]
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: v16i8_liveout:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; FEATURE-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; FEATURE-NEXT:    v_lshlrev_b32_e32 v6, 4, v0
; FEATURE-NEXT:    v_mov_b32_e32 v5, 0
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_load_dwordx4 v[1:4], v6, s[4:5]
; FEATURE-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; FEATURE-NEXT:    s_cbranch_execz .LBB4_2
; FEATURE-NEXT:  ; %bb.1: ; %bb.1
; FEATURE-NEXT:    global_load_dwordx4 v[1:4], v6, s[6:7]
; FEATURE-NEXT:  .LBB4_2: ; %bb.2
; FEATURE-NEXT:    s_or_b64 exec, exec, s[0:1]
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    global_store_dwordx4 v5, v[1:4], s[2:3]
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: v16i8_liveout:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; DEFAULT-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v6, 4, v0
; DEFAULT-NEXT:    v_mov_b32_e32 v5, 0
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_load_dwordx4 v[1:4], v6, s[4:5]
; DEFAULT-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; DEFAULT-NEXT:    s_cbranch_execz .LBB4_2
; DEFAULT-NEXT:  ; %bb.1: ; %bb.1
; DEFAULT-NEXT:    global_load_dwordx4 v[1:4], v6, s[6:7]
; DEFAULT-NEXT:  .LBB4_2: ; %bb.2
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[0:1]
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    global_store_dwordx4 v5, v[1:4], s[2:3]
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <16 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <16 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <16 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <16 x i8>, ptr addrspace(1) %gep2
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
bb.1:
  br label %bb.2

bb.2:
  %tmp5 = phi <16 x i8> [ %vec1, %entry ], [ %vec2, %bb.1 ]
  store <16 x i8> %tmp5, ptr addrspace(1) %dst, align 4
  ret void
}

define amdgpu_kernel void @v32i8_liveout(ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst) {
; GFX906-LABEL: v32i8_liveout:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; GFX906-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; GFX906-NEXT:    v_lshlrev_b32_e32 v10, 5, v0
; GFX906-NEXT:    v_mov_b32_e32 v9, 0
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dwordx4 v[1:4], v10, s[4:5] offset:16
; GFX906-NEXT:    global_load_dwordx4 v[5:8], v10, s[4:5]
; GFX906-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB5_2
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    global_load_dwordx4 v[1:4], v10, s[6:7] offset:16
; GFX906-NEXT:    global_load_dwordx4 v[5:8], v10, s[6:7]
; GFX906-NEXT:  .LBB5_2: ; %bb.2
; GFX906-NEXT:    s_or_b64 exec, exec, s[0:1]
; GFX906-NEXT:    s_waitcnt vmcnt(1)
; GFX906-NEXT:    global_store_dwordx4 v9, v[1:4], s[2:3] offset:16
; GFX906-NEXT:    s_waitcnt vmcnt(1)
; GFX906-NEXT:    global_store_dwordx4 v9, v[5:8], s[2:3]
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: v32i8_liveout:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; FEATURE-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; FEATURE-NEXT:    v_lshlrev_b32_e32 v10, 5, v0
; FEATURE-NEXT:    v_mov_b32_e32 v9, 0
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_load_dwordx4 v[1:4], v10, s[4:5] offset:16
; FEATURE-NEXT:    global_load_dwordx4 v[5:8], v10, s[4:5]
; FEATURE-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; FEATURE-NEXT:    s_cbranch_execz .LBB5_2
; FEATURE-NEXT:  ; %bb.1: ; %bb.1
; FEATURE-NEXT:    global_load_dwordx4 v[1:4], v10, s[6:7] offset:16
; FEATURE-NEXT:    global_load_dwordx4 v[5:8], v10, s[6:7]
; FEATURE-NEXT:  .LBB5_2: ; %bb.2
; FEATURE-NEXT:    s_or_b64 exec, exec, s[0:1]
; FEATURE-NEXT:    s_waitcnt vmcnt(1)
; FEATURE-NEXT:    global_store_dwordx4 v9, v[1:4], s[2:3] offset:16
; FEATURE-NEXT:    s_waitcnt vmcnt(1)
; FEATURE-NEXT:    global_store_dwordx4 v9, v[5:8], s[2:3]
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: v32i8_liveout:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; DEFAULT-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x34
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v10, 5, v0
; DEFAULT-NEXT:    v_mov_b32_e32 v9, 0
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_load_dwordx4 v[1:4], v10, s[4:5] offset:16
; DEFAULT-NEXT:    global_load_dwordx4 v[5:8], v10, s[4:5]
; DEFAULT-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; DEFAULT-NEXT:    s_cbranch_execz .LBB5_2
; DEFAULT-NEXT:  ; %bb.1: ; %bb.1
; DEFAULT-NEXT:    global_load_dwordx4 v[1:4], v10, s[6:7] offset:16
; DEFAULT-NEXT:    global_load_dwordx4 v[5:8], v10, s[6:7]
; DEFAULT-NEXT:  .LBB5_2: ; %bb.2
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[0:1]
; DEFAULT-NEXT:    s_waitcnt vmcnt(1)
; DEFAULT-NEXT:    global_store_dwordx4 v9, v[1:4], s[2:3] offset:16
; DEFAULT-NEXT:    s_waitcnt vmcnt(1)
; DEFAULT-NEXT:    global_store_dwordx4 v9, v[5:8], s[2:3]
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <32 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <32 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <32 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <32 x i8>, ptr addrspace(1) %gep2
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
bb.1:
  br label %bb.2

bb.2:
  %tmp5 = phi <32 x i8> [ %vec1, %entry ], [ %vec2, %bb.1 ]
  store <32 x i8> %tmp5, ptr addrspace(1) %dst, align 4
  ret void
}

define amdgpu_kernel void @v256i8_liveout(ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst) {
; GFX906-LABEL: v256i8_liveout:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; GFX906-NEXT:    v_lshlrev_b32_e32 v61, 3, v0
; GFX906-NEXT:    s_mov_b32 s8, SCRATCH_RSRC_DWORD0
; GFX906-NEXT:    s_mov_b32 s9, SCRATCH_RSRC_DWORD1
; GFX906-NEXT:    s_mov_b32 s10, -1
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dwordx4 v[5:8], v61, s[4:5] offset:240
; GFX906-NEXT:    s_mov_b32 s11, 0xe00000
; GFX906-NEXT:    s_add_u32 s8, s8, s3
; GFX906-NEXT:    s_addc_u32 s9, s9, 0
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x34
; GFX906-NEXT:    v_mov_b32_e32 v4, 0
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    buffer_store_dword v5, off, s[8:11], 0 offset:4 ; 4-byte Folded Spill
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    buffer_store_dword v6, off, s[8:11], 0 offset:8 ; 4-byte Folded Spill
; GFX906-NEXT:    buffer_store_dword v7, off, s[8:11], 0 offset:12 ; 4-byte Folded Spill
; GFX906-NEXT:    buffer_store_dword v8, off, s[8:11], 0 offset:16 ; 4-byte Folded Spill
; GFX906-NEXT:    global_load_dwordx4 v[5:8], v61, s[4:5] offset:224
; GFX906-NEXT:    s_nop 0
; GFX906-NEXT:    global_load_dwordx4 v[9:12], v61, s[4:5] offset:208
; GFX906-NEXT:    global_load_dwordx4 v[13:16], v61, s[4:5] offset:192
; GFX906-NEXT:    global_load_dwordx4 v[17:20], v61, s[4:5] offset:176
; GFX906-NEXT:    global_load_dwordx4 v[21:24], v61, s[4:5] offset:160
; GFX906-NEXT:    global_load_dwordx4 v[25:28], v61, s[4:5] offset:144
; GFX906-NEXT:    global_load_dwordx4 v[29:32], v61, s[4:5] offset:128
; GFX906-NEXT:    global_load_dwordx4 v[33:36], v61, s[4:5] offset:112
; GFX906-NEXT:    global_load_dwordx4 v[37:40], v61, s[4:5] offset:96
; GFX906-NEXT:    global_load_dwordx4 v[41:44], v61, s[4:5] offset:80
; GFX906-NEXT:    global_load_dwordx4 v[45:48], v61, s[4:5] offset:64
; GFX906-NEXT:    global_load_dwordx4 v[49:52], v61, s[4:5] offset:48
; GFX906-NEXT:    global_load_dwordx4 v[53:56], v61, s[4:5] offset:32
; GFX906-NEXT:    global_load_dwordx4 v[57:60], v61, s[4:5] offset:16
; GFX906-NEXT:    global_load_dwordx4 v[0:3], v61, s[4:5]
; GFX906-NEXT:    s_and_saveexec_b64 s[2:3], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB6_2
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    global_load_dwordx4 v[0:3], v61, s[6:7] offset:240
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    buffer_store_dword v0, off, s[8:11], 0 offset:4 ; 4-byte Folded Spill
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    buffer_store_dword v1, off, s[8:11], 0 offset:8 ; 4-byte Folded Spill
; GFX906-NEXT:    buffer_store_dword v2, off, s[8:11], 0 offset:12 ; 4-byte Folded Spill
; GFX906-NEXT:    buffer_store_dword v3, off, s[8:11], 0 offset:16 ; 4-byte Folded Spill
; GFX906-NEXT:    global_load_dwordx4 v[5:8], v61, s[6:7] offset:224
; GFX906-NEXT:    global_load_dwordx4 v[9:12], v61, s[6:7] offset:208
; GFX906-NEXT:    global_load_dwordx4 v[13:16], v61, s[6:7] offset:192
; GFX906-NEXT:    global_load_dwordx4 v[17:20], v61, s[6:7] offset:176
; GFX906-NEXT:    global_load_dwordx4 v[21:24], v61, s[6:7] offset:160
; GFX906-NEXT:    global_load_dwordx4 v[25:28], v61, s[6:7] offset:144
; GFX906-NEXT:    global_load_dwordx4 v[29:32], v61, s[6:7] offset:128
; GFX906-NEXT:    global_load_dwordx4 v[33:36], v61, s[6:7] offset:112
; GFX906-NEXT:    global_load_dwordx4 v[37:40], v61, s[6:7] offset:96
; GFX906-NEXT:    global_load_dwordx4 v[41:44], v61, s[6:7] offset:80
; GFX906-NEXT:    global_load_dwordx4 v[45:48], v61, s[6:7] offset:64
; GFX906-NEXT:    global_load_dwordx4 v[49:52], v61, s[6:7] offset:48
; GFX906-NEXT:    global_load_dwordx4 v[53:56], v61, s[6:7] offset:32
; GFX906-NEXT:    global_load_dwordx4 v[57:60], v61, s[6:7] offset:16
; GFX906-NEXT:    global_load_dwordx4 v[0:3], v61, s[6:7]
; GFX906-NEXT:  .LBB6_2: ; %bb.2
; GFX906-NEXT:    s_or_b64 exec, exec, s[2:3]
; GFX906-NEXT:    s_waitcnt vmcnt(7) lgkmcnt(0)
; GFX906-NEXT:    global_store_dwordx4 v4, v[33:36], s[0:1] offset:112
; GFX906-NEXT:    s_waitcnt vmcnt(7)
; GFX906-NEXT:    global_store_dwordx4 v4, v[37:40], s[0:1] offset:96
; GFX906-NEXT:    s_waitcnt vmcnt(7)
; GFX906-NEXT:    global_store_dwordx4 v4, v[41:44], s[0:1] offset:80
; GFX906-NEXT:    s_waitcnt vmcnt(7)
; GFX906-NEXT:    global_store_dwordx4 v4, v[45:48], s[0:1] offset:64
; GFX906-NEXT:    s_waitcnt vmcnt(7)
; GFX906-NEXT:    global_store_dwordx4 v4, v[49:52], s[0:1] offset:48
; GFX906-NEXT:    s_waitcnt vmcnt(7)
; GFX906-NEXT:    global_store_dwordx4 v4, v[53:56], s[0:1] offset:32
; GFX906-NEXT:    s_waitcnt vmcnt(7)
; GFX906-NEXT:    global_store_dwordx4 v4, v[57:60], s[0:1] offset:16
; GFX906-NEXT:    s_waitcnt vmcnt(7)
; GFX906-NEXT:    global_store_dwordx4 v4, v[0:3], s[0:1]
; GFX906-NEXT:    buffer_load_dword v0, off, s[8:11], 0 offset:4 ; 4-byte Folded Reload
; GFX906-NEXT:    s_nop 0
; GFX906-NEXT:    buffer_load_dword v1, off, s[8:11], 0 offset:8 ; 4-byte Folded Reload
; GFX906-NEXT:    buffer_load_dword v2, off, s[8:11], 0 offset:12 ; 4-byte Folded Reload
; GFX906-NEXT:    buffer_load_dword v3, off, s[8:11], 0 offset:16 ; 4-byte Folded Reload
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    global_store_dwordx4 v4, v[0:3], s[0:1] offset:240
; GFX906-NEXT:    global_store_dwordx4 v4, v[5:8], s[0:1] offset:224
; GFX906-NEXT:    global_store_dwordx4 v4, v[9:12], s[0:1] offset:208
; GFX906-NEXT:    global_store_dwordx4 v4, v[13:16], s[0:1] offset:192
; GFX906-NEXT:    global_store_dwordx4 v4, v[17:20], s[0:1] offset:176
; GFX906-NEXT:    global_store_dwordx4 v4, v[21:24], s[0:1] offset:160
; GFX906-NEXT:    global_store_dwordx4 v4, v[25:28], s[0:1] offset:144
; GFX906-NEXT:    global_store_dwordx4 v4, v[29:32], s[0:1] offset:128
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: v256i8_liveout:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; FEATURE-NEXT:    v_lshlrev_b32_e32 v61, 3, v0
; FEATURE-NEXT:    s_mov_b32 s8, SCRATCH_RSRC_DWORD0
; FEATURE-NEXT:    s_mov_b32 s9, SCRATCH_RSRC_DWORD1
; FEATURE-NEXT:    s_mov_b32 s10, -1
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_load_dwordx4 v[5:8], v61, s[4:5] offset:240
; FEATURE-NEXT:    s_mov_b32 s11, 0xe00000
; FEATURE-NEXT:    s_add_u32 s8, s8, s3
; FEATURE-NEXT:    s_addc_u32 s9, s9, 0
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; FEATURE-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x34
; FEATURE-NEXT:    v_mov_b32_e32 v4, 0
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    buffer_store_dword v5, off, s[8:11], 0 offset:4 ; 4-byte Folded Spill
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    buffer_store_dword v6, off, s[8:11], 0 offset:8 ; 4-byte Folded Spill
; FEATURE-NEXT:    buffer_store_dword v7, off, s[8:11], 0 offset:12 ; 4-byte Folded Spill
; FEATURE-NEXT:    buffer_store_dword v8, off, s[8:11], 0 offset:16 ; 4-byte Folded Spill
; FEATURE-NEXT:    global_load_dwordx4 v[5:8], v61, s[4:5] offset:224
; FEATURE-NEXT:    s_nop 0
; FEATURE-NEXT:    global_load_dwordx4 v[9:12], v61, s[4:5] offset:208
; FEATURE-NEXT:    global_load_dwordx4 v[13:16], v61, s[4:5] offset:192
; FEATURE-NEXT:    global_load_dwordx4 v[17:20], v61, s[4:5] offset:176
; FEATURE-NEXT:    global_load_dwordx4 v[21:24], v61, s[4:5] offset:160
; FEATURE-NEXT:    global_load_dwordx4 v[25:28], v61, s[4:5] offset:144
; FEATURE-NEXT:    global_load_dwordx4 v[29:32], v61, s[4:5] offset:128
; FEATURE-NEXT:    global_load_dwordx4 v[33:36], v61, s[4:5] offset:112
; FEATURE-NEXT:    global_load_dwordx4 v[37:40], v61, s[4:5] offset:96
; FEATURE-NEXT:    global_load_dwordx4 v[41:44], v61, s[4:5] offset:80
; FEATURE-NEXT:    global_load_dwordx4 v[45:48], v61, s[4:5] offset:64
; FEATURE-NEXT:    global_load_dwordx4 v[49:52], v61, s[4:5] offset:48
; FEATURE-NEXT:    global_load_dwordx4 v[53:56], v61, s[4:5] offset:32
; FEATURE-NEXT:    global_load_dwordx4 v[57:60], v61, s[4:5] offset:16
; FEATURE-NEXT:    global_load_dwordx4 v[0:3], v61, s[4:5]
; FEATURE-NEXT:    s_and_saveexec_b64 s[2:3], vcc
; FEATURE-NEXT:    s_cbranch_execz .LBB6_2
; FEATURE-NEXT:  ; %bb.1: ; %bb.1
; FEATURE-NEXT:    global_load_dwordx4 v[0:3], v61, s[6:7] offset:240
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    buffer_store_dword v0, off, s[8:11], 0 offset:4 ; 4-byte Folded Spill
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    buffer_store_dword v1, off, s[8:11], 0 offset:8 ; 4-byte Folded Spill
; FEATURE-NEXT:    buffer_store_dword v2, off, s[8:11], 0 offset:12 ; 4-byte Folded Spill
; FEATURE-NEXT:    buffer_store_dword v3, off, s[8:11], 0 offset:16 ; 4-byte Folded Spill
; FEATURE-NEXT:    global_load_dwordx4 v[5:8], v61, s[6:7] offset:224
; FEATURE-NEXT:    global_load_dwordx4 v[9:12], v61, s[6:7] offset:208
; FEATURE-NEXT:    global_load_dwordx4 v[13:16], v61, s[6:7] offset:192
; FEATURE-NEXT:    global_load_dwordx4 v[17:20], v61, s[6:7] offset:176
; FEATURE-NEXT:    global_load_dwordx4 v[21:24], v61, s[6:7] offset:160
; FEATURE-NEXT:    global_load_dwordx4 v[25:28], v61, s[6:7] offset:144
; FEATURE-NEXT:    global_load_dwordx4 v[29:32], v61, s[6:7] offset:128
; FEATURE-NEXT:    global_load_dwordx4 v[33:36], v61, s[6:7] offset:112
; FEATURE-NEXT:    global_load_dwordx4 v[37:40], v61, s[6:7] offset:96
; FEATURE-NEXT:    global_load_dwordx4 v[41:44], v61, s[6:7] offset:80
; FEATURE-NEXT:    global_load_dwordx4 v[45:48], v61, s[6:7] offset:64
; FEATURE-NEXT:    global_load_dwordx4 v[49:52], v61, s[6:7] offset:48
; FEATURE-NEXT:    global_load_dwordx4 v[53:56], v61, s[6:7] offset:32
; FEATURE-NEXT:    global_load_dwordx4 v[57:60], v61, s[6:7] offset:16
; FEATURE-NEXT:    global_load_dwordx4 v[0:3], v61, s[6:7]
; FEATURE-NEXT:  .LBB6_2: ; %bb.2
; FEATURE-NEXT:    s_or_b64 exec, exec, s[2:3]
; FEATURE-NEXT:    s_waitcnt vmcnt(7) lgkmcnt(0)
; FEATURE-NEXT:    global_store_dwordx4 v4, v[33:36], s[0:1] offset:112
; FEATURE-NEXT:    s_waitcnt vmcnt(7)
; FEATURE-NEXT:    global_store_dwordx4 v4, v[37:40], s[0:1] offset:96
; FEATURE-NEXT:    s_waitcnt vmcnt(7)
; FEATURE-NEXT:    global_store_dwordx4 v4, v[41:44], s[0:1] offset:80
; FEATURE-NEXT:    s_waitcnt vmcnt(7)
; FEATURE-NEXT:    global_store_dwordx4 v4, v[45:48], s[0:1] offset:64
; FEATURE-NEXT:    s_waitcnt vmcnt(7)
; FEATURE-NEXT:    global_store_dwordx4 v4, v[49:52], s[0:1] offset:48
; FEATURE-NEXT:    s_waitcnt vmcnt(7)
; FEATURE-NEXT:    global_store_dwordx4 v4, v[53:56], s[0:1] offset:32
; FEATURE-NEXT:    s_waitcnt vmcnt(7)
; FEATURE-NEXT:    global_store_dwordx4 v4, v[57:60], s[0:1] offset:16
; FEATURE-NEXT:    s_waitcnt vmcnt(7)
; FEATURE-NEXT:    global_store_dwordx4 v4, v[0:3], s[0:1]
; FEATURE-NEXT:    buffer_load_dword v0, off, s[8:11], 0 offset:4 ; 4-byte Folded Reload
; FEATURE-NEXT:    s_nop 0
; FEATURE-NEXT:    buffer_load_dword v1, off, s[8:11], 0 offset:8 ; 4-byte Folded Reload
; FEATURE-NEXT:    buffer_load_dword v2, off, s[8:11], 0 offset:12 ; 4-byte Folded Reload
; FEATURE-NEXT:    buffer_load_dword v3, off, s[8:11], 0 offset:16 ; 4-byte Folded Reload
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    global_store_dwordx4 v4, v[0:3], s[0:1] offset:240
; FEATURE-NEXT:    global_store_dwordx4 v4, v[5:8], s[0:1] offset:224
; FEATURE-NEXT:    global_store_dwordx4 v4, v[9:12], s[0:1] offset:208
; FEATURE-NEXT:    global_store_dwordx4 v4, v[13:16], s[0:1] offset:192
; FEATURE-NEXT:    global_store_dwordx4 v4, v[17:20], s[0:1] offset:176
; FEATURE-NEXT:    global_store_dwordx4 v4, v[21:24], s[0:1] offset:160
; FEATURE-NEXT:    global_store_dwordx4 v4, v[25:28], s[0:1] offset:144
; FEATURE-NEXT:    global_store_dwordx4 v4, v[29:32], s[0:1] offset:128
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: v256i8_liveout:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x24
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v61, 3, v0
; DEFAULT-NEXT:    s_mov_b32 s8, SCRATCH_RSRC_DWORD0
; DEFAULT-NEXT:    s_mov_b32 s9, SCRATCH_RSRC_DWORD1
; DEFAULT-NEXT:    s_mov_b32 s10, -1
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_load_dwordx4 v[5:8], v61, s[4:5] offset:240
; DEFAULT-NEXT:    s_mov_b32 s11, 0xe00000
; DEFAULT-NEXT:    s_add_u32 s8, s8, s3
; DEFAULT-NEXT:    s_addc_u32 s9, s9, 0
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; DEFAULT-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x34
; DEFAULT-NEXT:    v_mov_b32_e32 v4, 0
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    buffer_store_dword v5, off, s[8:11], 0 offset:4 ; 4-byte Folded Spill
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    buffer_store_dword v6, off, s[8:11], 0 offset:8 ; 4-byte Folded Spill
; DEFAULT-NEXT:    buffer_store_dword v7, off, s[8:11], 0 offset:12 ; 4-byte Folded Spill
; DEFAULT-NEXT:    buffer_store_dword v8, off, s[8:11], 0 offset:16 ; 4-byte Folded Spill
; DEFAULT-NEXT:    global_load_dwordx4 v[5:8], v61, s[4:5] offset:224
; DEFAULT-NEXT:    s_nop 0
; DEFAULT-NEXT:    global_load_dwordx4 v[9:12], v61, s[4:5] offset:208
; DEFAULT-NEXT:    global_load_dwordx4 v[13:16], v61, s[4:5] offset:192
; DEFAULT-NEXT:    global_load_dwordx4 v[17:20], v61, s[4:5] offset:176
; DEFAULT-NEXT:    global_load_dwordx4 v[21:24], v61, s[4:5] offset:160
; DEFAULT-NEXT:    global_load_dwordx4 v[25:28], v61, s[4:5] offset:144
; DEFAULT-NEXT:    global_load_dwordx4 v[29:32], v61, s[4:5] offset:128
; DEFAULT-NEXT:    global_load_dwordx4 v[33:36], v61, s[4:5] offset:112
; DEFAULT-NEXT:    global_load_dwordx4 v[37:40], v61, s[4:5] offset:96
; DEFAULT-NEXT:    global_load_dwordx4 v[41:44], v61, s[4:5] offset:80
; DEFAULT-NEXT:    global_load_dwordx4 v[45:48], v61, s[4:5] offset:64
; DEFAULT-NEXT:    global_load_dwordx4 v[49:52], v61, s[4:5] offset:48
; DEFAULT-NEXT:    global_load_dwordx4 v[53:56], v61, s[4:5] offset:32
; DEFAULT-NEXT:    global_load_dwordx4 v[57:60], v61, s[4:5] offset:16
; DEFAULT-NEXT:    global_load_dwordx4 v[0:3], v61, s[4:5]
; DEFAULT-NEXT:    s_and_saveexec_b64 s[2:3], vcc
; DEFAULT-NEXT:    s_cbranch_execz .LBB6_2
; DEFAULT-NEXT:  ; %bb.1: ; %bb.1
; DEFAULT-NEXT:    global_load_dwordx4 v[0:3], v61, s[6:7] offset:240
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    buffer_store_dword v0, off, s[8:11], 0 offset:4 ; 4-byte Folded Spill
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    buffer_store_dword v1, off, s[8:11], 0 offset:8 ; 4-byte Folded Spill
; DEFAULT-NEXT:    buffer_store_dword v2, off, s[8:11], 0 offset:12 ; 4-byte Folded Spill
; DEFAULT-NEXT:    buffer_store_dword v3, off, s[8:11], 0 offset:16 ; 4-byte Folded Spill
; DEFAULT-NEXT:    global_load_dwordx4 v[5:8], v61, s[6:7] offset:224
; DEFAULT-NEXT:    global_load_dwordx4 v[9:12], v61, s[6:7] offset:208
; DEFAULT-NEXT:    global_load_dwordx4 v[13:16], v61, s[6:7] offset:192
; DEFAULT-NEXT:    global_load_dwordx4 v[17:20], v61, s[6:7] offset:176
; DEFAULT-NEXT:    global_load_dwordx4 v[21:24], v61, s[6:7] offset:160
; DEFAULT-NEXT:    global_load_dwordx4 v[25:28], v61, s[6:7] offset:144
; DEFAULT-NEXT:    global_load_dwordx4 v[29:32], v61, s[6:7] offset:128
; DEFAULT-NEXT:    global_load_dwordx4 v[33:36], v61, s[6:7] offset:112
; DEFAULT-NEXT:    global_load_dwordx4 v[37:40], v61, s[6:7] offset:96
; DEFAULT-NEXT:    global_load_dwordx4 v[41:44], v61, s[6:7] offset:80
; DEFAULT-NEXT:    global_load_dwordx4 v[45:48], v61, s[6:7] offset:64
; DEFAULT-NEXT:    global_load_dwordx4 v[49:52], v61, s[6:7] offset:48
; DEFAULT-NEXT:    global_load_dwordx4 v[53:56], v61, s[6:7] offset:32
; DEFAULT-NEXT:    global_load_dwordx4 v[57:60], v61, s[6:7] offset:16
; DEFAULT-NEXT:    global_load_dwordx4 v[0:3], v61, s[6:7]
; DEFAULT-NEXT:  .LBB6_2: ; %bb.2
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[2:3]
; DEFAULT-NEXT:    s_waitcnt vmcnt(7) lgkmcnt(0)
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[33:36], s[0:1] offset:112
; DEFAULT-NEXT:    s_waitcnt vmcnt(7)
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[37:40], s[0:1] offset:96
; DEFAULT-NEXT:    s_waitcnt vmcnt(7)
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[41:44], s[0:1] offset:80
; DEFAULT-NEXT:    s_waitcnt vmcnt(7)
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[45:48], s[0:1] offset:64
; DEFAULT-NEXT:    s_waitcnt vmcnt(7)
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[49:52], s[0:1] offset:48
; DEFAULT-NEXT:    s_waitcnt vmcnt(7)
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[53:56], s[0:1] offset:32
; DEFAULT-NEXT:    s_waitcnt vmcnt(7)
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[57:60], s[0:1] offset:16
; DEFAULT-NEXT:    s_waitcnt vmcnt(7)
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[0:3], s[0:1]
; DEFAULT-NEXT:    buffer_load_dword v0, off, s[8:11], 0 offset:4 ; 4-byte Folded Reload
; DEFAULT-NEXT:    s_nop 0
; DEFAULT-NEXT:    buffer_load_dword v1, off, s[8:11], 0 offset:8 ; 4-byte Folded Reload
; DEFAULT-NEXT:    buffer_load_dword v2, off, s[8:11], 0 offset:12 ; 4-byte Folded Reload
; DEFAULT-NEXT:    buffer_load_dword v3, off, s[8:11], 0 offset:16 ; 4-byte Folded Reload
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[0:3], s[0:1] offset:240
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[5:8], s[0:1] offset:224
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[9:12], s[0:1] offset:208
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[13:16], s[0:1] offset:192
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[17:20], s[0:1] offset:176
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[21:24], s[0:1] offset:160
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[25:28], s[0:1] offset:144
; DEFAULT-NEXT:    global_store_dwordx4 v4, v[29:32], s[0:1] offset:128
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <8 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <256 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <8 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <256 x i8>, ptr addrspace(1) %gep2
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
bb.1:
  br label %bb.2

bb.2:
  %tmp5 = phi <256 x i8> [ %vec1, %entry ], [ %vec2, %bb.1 ]
  store <256 x i8> %tmp5, ptr addrspace(1) %dst, align 4
  ret void
}

define amdgpu_kernel void @repeat_successor(i32 %in, ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst) {
; GFX906-LABEL: repeat_successor:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dword s8, s[0:1], 0x24
; GFX906-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x2c
; GFX906-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x3c
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    s_cmp_lt_i32 s8, 3
; GFX906-NEXT:    s_cbranch_scc0 .LBB7_3
; GFX906-NEXT:  ; %bb.1: ; %LeafBlock
; GFX906-NEXT:    s_cmp_gt_i32 s8, 0
; GFX906-NEXT:    s_cbranch_scc0 .LBB7_6
; GFX906-NEXT:  ; %bb.2:
; GFX906-NEXT:    v_lshlrev_b32_e32 v0, 2, v0
; GFX906-NEXT:    global_load_dword v0, v0, s[4:5]
; GFX906-NEXT:    s_branch .LBB7_5
; GFX906-NEXT:  .LBB7_3: ; %LeafBlock5
; GFX906-NEXT:    s_cmp_eq_u32 s8, 3
; GFX906-NEXT:    s_cbranch_scc0 .LBB7_6
; GFX906-NEXT:  ; %bb.4: ; %sw.bb5
; GFX906-NEXT:    v_lshlrev_b32_e32 v0, 2, v0
; GFX906-NEXT:    global_load_dword v0, v0, s[6:7]
; GFX906-NEXT:  .LBB7_5: ; %return.sink.split
; GFX906-NEXT:    v_mov_b32_e32 v1, 0
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    global_store_dword v1, v0, s[2:3]
; GFX906-NEXT:  .LBB7_6: ; %return
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: repeat_successor:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dword s8, s[0:1], 0x24
; FEATURE-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x2c
; FEATURE-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x3c
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    s_cmp_lt_i32 s8, 3
; FEATURE-NEXT:    s_cbranch_scc0 .LBB7_3
; FEATURE-NEXT:  ; %bb.1: ; %LeafBlock
; FEATURE-NEXT:    s_cmp_gt_i32 s8, 0
; FEATURE-NEXT:    s_cbranch_scc0 .LBB7_6
; FEATURE-NEXT:  ; %bb.2:
; FEATURE-NEXT:    v_lshlrev_b32_e32 v0, 2, v0
; FEATURE-NEXT:    global_load_dword v0, v0, s[4:5]
; FEATURE-NEXT:    s_branch .LBB7_5
; FEATURE-NEXT:  .LBB7_3: ; %LeafBlock5
; FEATURE-NEXT:    s_cmp_eq_u32 s8, 3
; FEATURE-NEXT:    s_cbranch_scc0 .LBB7_6
; FEATURE-NEXT:  ; %bb.4: ; %sw.bb5
; FEATURE-NEXT:    v_lshlrev_b32_e32 v0, 2, v0
; FEATURE-NEXT:    global_load_dword v0, v0, s[6:7]
; FEATURE-NEXT:  .LBB7_5: ; %return.sink.split
; FEATURE-NEXT:    v_mov_b32_e32 v1, 0
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    global_store_dword v1, v0, s[2:3]
; FEATURE-NEXT:  .LBB7_6: ; %return
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: repeat_successor:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dword s8, s[0:1], 0x24
; DEFAULT-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x2c
; DEFAULT-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x3c
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    s_cmp_lt_i32 s8, 3
; DEFAULT-NEXT:    s_cbranch_scc0 .LBB7_3
; DEFAULT-NEXT:  ; %bb.1: ; %LeafBlock
; DEFAULT-NEXT:    s_cmp_gt_i32 s8, 0
; DEFAULT-NEXT:    s_cbranch_scc0 .LBB7_6
; DEFAULT-NEXT:  ; %bb.2:
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v0, 2, v0
; DEFAULT-NEXT:    global_load_dword v0, v0, s[4:5]
; DEFAULT-NEXT:    s_branch .LBB7_5
; DEFAULT-NEXT:  .LBB7_3: ; %LeafBlock5
; DEFAULT-NEXT:    s_cmp_eq_u32 s8, 3
; DEFAULT-NEXT:    s_cbranch_scc0 .LBB7_6
; DEFAULT-NEXT:  ; %bb.4: ; %sw.bb5
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v0, 2, v0
; DEFAULT-NEXT:    global_load_dword v0, v0, s[6:7]
; DEFAULT-NEXT:  .LBB7_5: ; %return.sink.split
; DEFAULT-NEXT:    v_mov_b32_e32 v1, 0
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    global_store_dword v1, v0, s[2:3]
; DEFAULT-NEXT:  .LBB7_6: ; %return
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <4 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <4 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <4 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <4 x i8>, ptr addrspace(1) %gep2
  switch i32 %in, label %return [
  i32 1, label %return.sink.split
  i32 2, label %return.sink.split
  i32 3, label %sw.bb5
  ]

sw.bb5:
  br label %return.sink.split

return.sink.split:
  %tmp5 = phi <4 x i8> [ %vec2, %sw.bb5 ], [ %vec1, %entry ], [ %vec1, %entry ]
  store <4 x i8> %tmp5, ptr addrspace(1) %dst, align 4
  ret void

return:
  ret void
}

define amdgpu_kernel void @v8i8_phi_chain(ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst0, ptr addrspace(1) nocapture %dst1) {
; GFX906-LABEL: v8i8_phi_chain:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx8 s[0:7], s[0:1], 0x24
; GFX906-NEXT:    v_lshlrev_b32_e32 v3, 3, v0
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dwordx2 v[1:2], v3, s[0:1]
; GFX906-NEXT:    v_cmp_lt_u32_e64 s[0:1], 14, v0
; GFX906-NEXT:    s_and_saveexec_b64 s[8:9], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB8_2
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    global_load_dwordx2 v[1:2], v3, s[2:3]
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; GFX906-NEXT:    s_andn2_b64 s[0:1], s[0:1], exec
; GFX906-NEXT:    s_and_b64 s[2:3], vcc, exec
; GFX906-NEXT:    s_or_b64 s[0:1], s[0:1], s[2:3]
; GFX906-NEXT:  .LBB8_2: ; %Flow
; GFX906-NEXT:    s_or_b64 exec, exec, s[8:9]
; GFX906-NEXT:    s_and_saveexec_b64 s[2:3], s[0:1]
; GFX906-NEXT:    s_cbranch_execz .LBB8_4
; GFX906-NEXT:  ; %bb.3: ; %bb.2
; GFX906-NEXT:    v_mov_b32_e32 v0, 0
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    global_store_dwordx2 v0, v[1:2], s[4:5]
; GFX906-NEXT:  .LBB8_4: ; %bb.3
; GFX906-NEXT:    s_or_b64 exec, exec, s[2:3]
; GFX906-NEXT:    v_mov_b32_e32 v0, 0
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    global_store_dwordx2 v0, v[1:2], s[6:7]
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: v8i8_phi_chain:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dwordx8 s[0:7], s[0:1], 0x24
; FEATURE-NEXT:    v_lshlrev_b32_e32 v3, 3, v0
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_load_dwordx2 v[1:2], v3, s[0:1]
; FEATURE-NEXT:    v_cmp_lt_u32_e64 s[0:1], 14, v0
; FEATURE-NEXT:    s_and_saveexec_b64 s[8:9], vcc
; FEATURE-NEXT:    s_cbranch_execz .LBB8_2
; FEATURE-NEXT:  ; %bb.1: ; %bb.1
; FEATURE-NEXT:    global_load_dwordx2 v[1:2], v3, s[2:3]
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; FEATURE-NEXT:    s_andn2_b64 s[0:1], s[0:1], exec
; FEATURE-NEXT:    s_and_b64 s[2:3], vcc, exec
; FEATURE-NEXT:    s_or_b64 s[0:1], s[0:1], s[2:3]
; FEATURE-NEXT:  .LBB8_2: ; %Flow
; FEATURE-NEXT:    s_or_b64 exec, exec, s[8:9]
; FEATURE-NEXT:    s_and_saveexec_b64 s[2:3], s[0:1]
; FEATURE-NEXT:    s_cbranch_execz .LBB8_4
; FEATURE-NEXT:  ; %bb.3: ; %bb.2
; FEATURE-NEXT:    v_mov_b32_e32 v0, 0
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    global_store_dwordx2 v0, v[1:2], s[4:5]
; FEATURE-NEXT:  .LBB8_4: ; %bb.3
; FEATURE-NEXT:    s_or_b64 exec, exec, s[2:3]
; FEATURE-NEXT:    v_mov_b32_e32 v0, 0
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    global_store_dwordx2 v0, v[1:2], s[6:7]
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: v8i8_phi_chain:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dwordx8 s[0:7], s[0:1], 0x24
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v3, 3, v0
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_load_dwordx2 v[1:2], v3, s[0:1]
; DEFAULT-NEXT:    v_cmp_lt_u32_e64 s[0:1], 14, v0
; DEFAULT-NEXT:    s_and_saveexec_b64 s[8:9], vcc
; DEFAULT-NEXT:    s_cbranch_execz .LBB8_2
; DEFAULT-NEXT:  ; %bb.1: ; %bb.1
; DEFAULT-NEXT:    global_load_dwordx2 v[1:2], v3, s[2:3]
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; DEFAULT-NEXT:    s_andn2_b64 s[0:1], s[0:1], exec
; DEFAULT-NEXT:    s_and_b64 s[2:3], vcc, exec
; DEFAULT-NEXT:    s_or_b64 s[0:1], s[0:1], s[2:3]
; DEFAULT-NEXT:  .LBB8_2: ; %Flow
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[8:9]
; DEFAULT-NEXT:    s_and_saveexec_b64 s[2:3], s[0:1]
; DEFAULT-NEXT:    s_cbranch_execz .LBB8_4
; DEFAULT-NEXT:  ; %bb.3: ; %bb.2
; DEFAULT-NEXT:    v_mov_b32_e32 v0, 0
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    global_store_dwordx2 v0, v[1:2], s[4:5]
; DEFAULT-NEXT:  .LBB8_4: ; %bb.3
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[2:3]
; DEFAULT-NEXT:    v_mov_b32_e32 v0, 0
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    global_store_dwordx2 v0, v[1:2], s[6:7]
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <8 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <8 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <8 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <8 x i8>, ptr addrspace(1) %gep2
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
bb.1:
  %cmp2 = icmp ult i32 %idx, 7
  br i1 %cmp2, label %bb.2, label %bb.3

bb.2:
  %tmp5 = phi <8 x i8> [ %vec1, %entry ], [ %vec2, %bb.1 ]
  store <8 x i8> %tmp5, ptr addrspace(1) %dst0, align 4
  br label %bb.3

bb.3:
  %tmp7 = phi <8 x i8> [ %vec2, %bb.1], [%tmp5, %bb.2]
  store <8 x i8> %tmp7, ptr addrspace(1) %dst1, align 4
  ret void
}


define amdgpu_kernel void @v8i8_phi_zeroinit(ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst0, ptr addrspace(1) nocapture %dst1) {
; GFX906-LABEL: v8i8_phi_zeroinit:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx8 s[0:7], s[0:1], 0x24
; GFX906-NEXT:    v_lshlrev_b32_e32 v5, 3, v0
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    ; implicit-def: $vgpr1_vgpr2
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dwordx2 v[3:4], v5, s[0:1]
; GFX906-NEXT:    v_cmp_lt_u32_e64 s[0:1], 14, v0
; GFX906-NEXT:    s_and_saveexec_b64 s[8:9], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB9_2
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    global_load_dwordx2 v[1:2], v5, s[2:3]
; GFX906-NEXT:    s_mov_b32 s2, 0
; GFX906-NEXT:    s_mov_b32 s3, s2
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; GFX906-NEXT:    s_waitcnt vmcnt(1)
; GFX906-NEXT:    v_mov_b32_e32 v4, s3
; GFX906-NEXT:    v_mov_b32_e32 v3, s2
; GFX906-NEXT:    s_andn2_b64 s[0:1], s[0:1], exec
; GFX906-NEXT:    s_and_b64 s[2:3], vcc, exec
; GFX906-NEXT:    s_or_b64 s[0:1], s[0:1], s[2:3]
; GFX906-NEXT:  .LBB9_2: ; %Flow
; GFX906-NEXT:    s_or_b64 exec, exec, s[8:9]
; GFX906-NEXT:    s_and_saveexec_b64 s[2:3], s[0:1]
; GFX906-NEXT:    s_cbranch_execz .LBB9_4
; GFX906-NEXT:  ; %bb.3: ; %bb.2
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    v_mov_b32_e32 v1, v3
; GFX906-NEXT:    v_mov_b32_e32 v0, 0
; GFX906-NEXT:    v_mov_b32_e32 v2, v4
; GFX906-NEXT:    global_store_dwordx2 v0, v[3:4], s[4:5]
; GFX906-NEXT:  .LBB9_4: ; %bb.3
; GFX906-NEXT:    s_or_b64 exec, exec, s[2:3]
; GFX906-NEXT:    v_mov_b32_e32 v0, 0
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    global_store_dwordx2 v0, v[1:2], s[6:7]
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: v8i8_phi_zeroinit:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dwordx8 s[0:7], s[0:1], 0x24
; FEATURE-NEXT:    v_lshlrev_b32_e32 v5, 3, v0
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; FEATURE-NEXT:    ; implicit-def: $vgpr1_vgpr2
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_load_dwordx2 v[3:4], v5, s[0:1]
; FEATURE-NEXT:    v_cmp_lt_u32_e64 s[0:1], 14, v0
; FEATURE-NEXT:    s_and_saveexec_b64 s[8:9], vcc
; FEATURE-NEXT:    s_cbranch_execz .LBB9_2
; FEATURE-NEXT:  ; %bb.1: ; %bb.1
; FEATURE-NEXT:    global_load_dwordx2 v[1:2], v5, s[2:3]
; FEATURE-NEXT:    s_mov_b32 s2, 0
; FEATURE-NEXT:    s_mov_b32 s3, s2
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; FEATURE-NEXT:    s_waitcnt vmcnt(1)
; FEATURE-NEXT:    v_mov_b32_e32 v4, s3
; FEATURE-NEXT:    v_mov_b32_e32 v3, s2
; FEATURE-NEXT:    s_andn2_b64 s[0:1], s[0:1], exec
; FEATURE-NEXT:    s_and_b64 s[2:3], vcc, exec
; FEATURE-NEXT:    s_or_b64 s[0:1], s[0:1], s[2:3]
; FEATURE-NEXT:  .LBB9_2: ; %Flow
; FEATURE-NEXT:    s_or_b64 exec, exec, s[8:9]
; FEATURE-NEXT:    s_and_saveexec_b64 s[2:3], s[0:1]
; FEATURE-NEXT:    s_cbranch_execz .LBB9_4
; FEATURE-NEXT:  ; %bb.3: ; %bb.2
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    v_mov_b32_e32 v1, v3
; FEATURE-NEXT:    v_mov_b32_e32 v0, 0
; FEATURE-NEXT:    v_mov_b32_e32 v2, v4
; FEATURE-NEXT:    global_store_dwordx2 v0, v[3:4], s[4:5]
; FEATURE-NEXT:  .LBB9_4: ; %bb.3
; FEATURE-NEXT:    s_or_b64 exec, exec, s[2:3]
; FEATURE-NEXT:    v_mov_b32_e32 v0, 0
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    global_store_dwordx2 v0, v[1:2], s[6:7]
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: v8i8_phi_zeroinit:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dwordx8 s[0:7], s[0:1], 0x24
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v5, 3, v0
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; DEFAULT-NEXT:    ; implicit-def: $vgpr1_vgpr2
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_load_dwordx2 v[3:4], v5, s[0:1]
; DEFAULT-NEXT:    v_cmp_lt_u32_e64 s[0:1], 14, v0
; DEFAULT-NEXT:    s_and_saveexec_b64 s[8:9], vcc
; DEFAULT-NEXT:    s_cbranch_execz .LBB9_2
; DEFAULT-NEXT:  ; %bb.1: ; %bb.1
; DEFAULT-NEXT:    global_load_dwordx2 v[1:2], v5, s[2:3]
; DEFAULT-NEXT:    s_mov_b32 s2, 0
; DEFAULT-NEXT:    s_mov_b32 s3, s2
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; DEFAULT-NEXT:    s_waitcnt vmcnt(1)
; DEFAULT-NEXT:    v_mov_b32_e32 v4, s3
; DEFAULT-NEXT:    v_mov_b32_e32 v3, s2
; DEFAULT-NEXT:    s_andn2_b64 s[0:1], s[0:1], exec
; DEFAULT-NEXT:    s_and_b64 s[2:3], vcc, exec
; DEFAULT-NEXT:    s_or_b64 s[0:1], s[0:1], s[2:3]
; DEFAULT-NEXT:  .LBB9_2: ; %Flow
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[8:9]
; DEFAULT-NEXT:    s_and_saveexec_b64 s[2:3], s[0:1]
; DEFAULT-NEXT:    s_cbranch_execz .LBB9_4
; DEFAULT-NEXT:  ; %bb.3: ; %bb.2
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    v_mov_b32_e32 v1, v3
; DEFAULT-NEXT:    v_mov_b32_e32 v0, 0
; DEFAULT-NEXT:    v_mov_b32_e32 v2, v4
; DEFAULT-NEXT:    global_store_dwordx2 v0, v[3:4], s[4:5]
; DEFAULT-NEXT:  .LBB9_4: ; %bb.3
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[2:3]
; DEFAULT-NEXT:    v_mov_b32_e32 v0, 0
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    global_store_dwordx2 v0, v[1:2], s[6:7]
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <8 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <8 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <8 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <8 x i8>, ptr addrspace(1) %gep2
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
bb.1:
  %cmp2 = icmp ult i32 %idx, 7
  br i1 %cmp2, label %bb.2, label %bb.3

bb.2:
  %tmp5 = phi <8 x i8> [ %vec1, %entry ], [ zeroinitializer, %bb.1 ]
  store <8 x i8> %tmp5, ptr addrspace(1) %dst0, align 4
  br label %bb.3

bb.3:
  %tmp7 = phi <8 x i8> [ %vec2, %bb.1], [%tmp5, %bb.2]
  store <8 x i8> %tmp7, ptr addrspace(1) %dst1, align 4
  ret void
}

define amdgpu_kernel void @v8i8_phi_const(ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst0, ptr addrspace(1) nocapture %dst1) {
; GFX906-LABEL: v8i8_phi_const:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx8 s[0:7], s[0:1], 0x24
; GFX906-NEXT:    v_lshlrev_b32_e32 v4, 3, v0
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    ; implicit-def: $vgpr3
; GFX906-NEXT:    ; implicit-def: $vgpr13
; GFX906-NEXT:    ; implicit-def: $vgpr11
; GFX906-NEXT:    ; implicit-def: $vgpr14
; GFX906-NEXT:    ; implicit-def: $vgpr15
; GFX906-NEXT:    ; implicit-def: $vgpr12
; GFX906-NEXT:    ; implicit-def: $vgpr16
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dwordx2 v[1:2], v4, s[0:1]
; GFX906-NEXT:    v_cmp_lt_u32_e64 s[0:1], 14, v0
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    v_lshrrev_b32_e32 v5, 24, v2
; GFX906-NEXT:    v_lshrrev_b32_e32 v6, 16, v2
; GFX906-NEXT:    v_lshrrev_b32_e32 v7, 8, v2
; GFX906-NEXT:    v_lshrrev_b32_e32 v8, 24, v1
; GFX906-NEXT:    v_lshrrev_b32_e32 v9, 16, v1
; GFX906-NEXT:    v_lshrrev_b32_e32 v10, 8, v1
; GFX906-NEXT:    s_and_saveexec_b64 s[8:9], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB10_2
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    global_load_dwordx2 v[3:4], v4, s[2:3]
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; GFX906-NEXT:    s_andn2_b64 s[0:1], s[0:1], exec
; GFX906-NEXT:    s_and_b64 s[2:3], vcc, exec
; GFX906-NEXT:    v_mov_b32_e32 v1, 1
; GFX906-NEXT:    v_mov_b32_e32 v10, 2
; GFX906-NEXT:    v_mov_b32_e32 v9, 3
; GFX906-NEXT:    v_mov_b32_e32 v8, 4
; GFX906-NEXT:    v_mov_b32_e32 v2, 5
; GFX906-NEXT:    v_mov_b32_e32 v7, 6
; GFX906-NEXT:    v_mov_b32_e32 v6, 7
; GFX906-NEXT:    v_mov_b32_e32 v5, 8
; GFX906-NEXT:    s_or_b64 s[0:1], s[0:1], s[2:3]
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    v_lshrrev_b32_e32 v16, 24, v4
; GFX906-NEXT:    v_lshrrev_b32_e32 v12, 16, v4
; GFX906-NEXT:    v_lshrrev_b32_e32 v15, 8, v4
; GFX906-NEXT:    v_lshrrev_b32_e32 v14, 24, v3
; GFX906-NEXT:    v_lshrrev_b32_e32 v11, 16, v3
; GFX906-NEXT:    v_lshrrev_b32_e32 v13, 8, v3
; GFX906-NEXT:  .LBB10_2: ; %Flow
; GFX906-NEXT:    s_or_b64 exec, exec, s[8:9]
; GFX906-NEXT:    s_and_saveexec_b64 s[2:3], s[0:1]
; GFX906-NEXT:    s_cbranch_execz .LBB10_4
; GFX906-NEXT:  ; %bb.3: ; %bb.2
; GFX906-NEXT:    v_lshlrev_b16_e32 v3, 8, v10
; GFX906-NEXT:    v_lshlrev_b16_e32 v4, 8, v8
; GFX906-NEXT:    v_or_b32_sdwa v3, v1, v3 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v4, v9, v4 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v3, v3, v4 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; GFX906-NEXT:    v_lshlrev_b16_e32 v4, 8, v7
; GFX906-NEXT:    v_lshlrev_b16_e32 v11, 8, v5
; GFX906-NEXT:    v_or_b32_sdwa v4, v2, v4 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v11, v6, v11 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_mov_b32_e32 v0, 0
; GFX906-NEXT:    v_or_b32_sdwa v4, v4, v11 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; GFX906-NEXT:    global_store_dwordx2 v0, v[3:4], s[4:5]
; GFX906-NEXT:    v_mov_b32_e32 v3, v1
; GFX906-NEXT:    v_mov_b32_e32 v13, v10
; GFX906-NEXT:    v_mov_b32_e32 v11, v9
; GFX906-NEXT:    v_mov_b32_e32 v14, v8
; GFX906-NEXT:    v_mov_b32_e32 v4, v2
; GFX906-NEXT:    v_mov_b32_e32 v15, v7
; GFX906-NEXT:    v_mov_b32_e32 v12, v6
; GFX906-NEXT:    v_mov_b32_e32 v16, v5
; GFX906-NEXT:  .LBB10_4: ; %bb.3
; GFX906-NEXT:    s_or_b64 exec, exec, s[2:3]
; GFX906-NEXT:    v_lshlrev_b16_e32 v0, 8, v13
; GFX906-NEXT:    v_lshlrev_b16_e32 v1, 8, v14
; GFX906-NEXT:    v_or_b32_sdwa v0, v3, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v1, v11, v1 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v0, v0, v1 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; GFX906-NEXT:    v_lshlrev_b16_e32 v1, 8, v15
; GFX906-NEXT:    v_lshlrev_b16_e32 v3, 8, v16
; GFX906-NEXT:    v_or_b32_sdwa v1, v4, v1 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v3, v12, v3 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_mov_b32_e32 v2, 0
; GFX906-NEXT:    v_or_b32_sdwa v1, v1, v3 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; GFX906-NEXT:    global_store_dwordx2 v2, v[0:1], s[6:7]
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: v8i8_phi_const:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dwordx8 s[0:7], s[0:1], 0x24
; FEATURE-NEXT:    v_lshlrev_b32_e32 v4, 3, v0
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; FEATURE-NEXT:    ; implicit-def: $vgpr3
; FEATURE-NEXT:    ; implicit-def: $vgpr13
; FEATURE-NEXT:    ; implicit-def: $vgpr11
; FEATURE-NEXT:    ; implicit-def: $vgpr14
; FEATURE-NEXT:    ; implicit-def: $vgpr15
; FEATURE-NEXT:    ; implicit-def: $vgpr12
; FEATURE-NEXT:    ; implicit-def: $vgpr16
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_load_dwordx2 v[1:2], v4, s[0:1]
; FEATURE-NEXT:    v_cmp_lt_u32_e64 s[0:1], 14, v0
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    v_lshrrev_b32_e32 v5, 24, v2
; FEATURE-NEXT:    v_lshrrev_b32_e32 v6, 16, v2
; FEATURE-NEXT:    v_lshrrev_b32_e32 v7, 8, v2
; FEATURE-NEXT:    v_lshrrev_b32_e32 v8, 24, v1
; FEATURE-NEXT:    v_lshrrev_b32_e32 v9, 16, v1
; FEATURE-NEXT:    v_lshrrev_b32_e32 v10, 8, v1
; FEATURE-NEXT:    s_and_saveexec_b64 s[8:9], vcc
; FEATURE-NEXT:    s_cbranch_execz .LBB10_2
; FEATURE-NEXT:  ; %bb.1: ; %bb.1
; FEATURE-NEXT:    global_load_dwordx2 v[3:4], v4, s[2:3]
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; FEATURE-NEXT:    s_andn2_b64 s[0:1], s[0:1], exec
; FEATURE-NEXT:    s_and_b64 s[2:3], vcc, exec
; FEATURE-NEXT:    v_mov_b32_e32 v1, 1
; FEATURE-NEXT:    v_mov_b32_e32 v10, 2
; FEATURE-NEXT:    v_mov_b32_e32 v9, 3
; FEATURE-NEXT:    v_mov_b32_e32 v8, 4
; FEATURE-NEXT:    v_mov_b32_e32 v2, 5
; FEATURE-NEXT:    v_mov_b32_e32 v7, 6
; FEATURE-NEXT:    v_mov_b32_e32 v6, 7
; FEATURE-NEXT:    v_mov_b32_e32 v5, 8
; FEATURE-NEXT:    s_or_b64 s[0:1], s[0:1], s[2:3]
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    v_lshrrev_b32_e32 v16, 24, v4
; FEATURE-NEXT:    v_lshrrev_b32_e32 v12, 16, v4
; FEATURE-NEXT:    v_lshrrev_b32_e32 v15, 8, v4
; FEATURE-NEXT:    v_lshrrev_b32_e32 v14, 24, v3
; FEATURE-NEXT:    v_lshrrev_b32_e32 v11, 16, v3
; FEATURE-NEXT:    v_lshrrev_b32_e32 v13, 8, v3
; FEATURE-NEXT:  .LBB10_2: ; %Flow
; FEATURE-NEXT:    s_or_b64 exec, exec, s[8:9]
; FEATURE-NEXT:    s_and_saveexec_b64 s[2:3], s[0:1]
; FEATURE-NEXT:    s_cbranch_execz .LBB10_4
; FEATURE-NEXT:  ; %bb.3: ; %bb.2
; FEATURE-NEXT:    v_lshlrev_b16_e32 v3, 8, v10
; FEATURE-NEXT:    v_lshlrev_b16_e32 v4, 8, v8
; FEATURE-NEXT:    v_or_b32_sdwa v3, v1, v3 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_or_b32_sdwa v4, v9, v4 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_or_b32_sdwa v3, v3, v4 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; FEATURE-NEXT:    v_lshlrev_b16_e32 v4, 8, v7
; FEATURE-NEXT:    v_lshlrev_b16_e32 v11, 8, v5
; FEATURE-NEXT:    v_or_b32_sdwa v4, v2, v4 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_or_b32_sdwa v11, v6, v11 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_mov_b32_e32 v0, 0
; FEATURE-NEXT:    v_or_b32_sdwa v4, v4, v11 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; FEATURE-NEXT:    global_store_dwordx2 v0, v[3:4], s[4:5]
; FEATURE-NEXT:    v_mov_b32_e32 v3, v1
; FEATURE-NEXT:    v_mov_b32_e32 v13, v10
; FEATURE-NEXT:    v_mov_b32_e32 v11, v9
; FEATURE-NEXT:    v_mov_b32_e32 v14, v8
; FEATURE-NEXT:    v_mov_b32_e32 v4, v2
; FEATURE-NEXT:    v_mov_b32_e32 v15, v7
; FEATURE-NEXT:    v_mov_b32_e32 v12, v6
; FEATURE-NEXT:    v_mov_b32_e32 v16, v5
; FEATURE-NEXT:  .LBB10_4: ; %bb.3
; FEATURE-NEXT:    s_or_b64 exec, exec, s[2:3]
; FEATURE-NEXT:    v_lshlrev_b16_e32 v0, 8, v13
; FEATURE-NEXT:    v_lshlrev_b16_e32 v1, 8, v14
; FEATURE-NEXT:    v_or_b32_sdwa v0, v3, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_or_b32_sdwa v1, v11, v1 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_or_b32_sdwa v0, v0, v1 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; FEATURE-NEXT:    v_lshlrev_b16_e32 v1, 8, v15
; FEATURE-NEXT:    v_lshlrev_b16_e32 v3, 8, v16
; FEATURE-NEXT:    v_or_b32_sdwa v1, v4, v1 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_or_b32_sdwa v3, v12, v3 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_mov_b32_e32 v2, 0
; FEATURE-NEXT:    v_or_b32_sdwa v1, v1, v3 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; FEATURE-NEXT:    global_store_dwordx2 v2, v[0:1], s[6:7]
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: v8i8_phi_const:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dwordx8 s[0:7], s[0:1], 0x24
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v4, 3, v0
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; DEFAULT-NEXT:    ; implicit-def: $vgpr3
; DEFAULT-NEXT:    ; implicit-def: $vgpr13
; DEFAULT-NEXT:    ; implicit-def: $vgpr11
; DEFAULT-NEXT:    ; implicit-def: $vgpr14
; DEFAULT-NEXT:    ; implicit-def: $vgpr15
; DEFAULT-NEXT:    ; implicit-def: $vgpr12
; DEFAULT-NEXT:    ; implicit-def: $vgpr16
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_load_dwordx2 v[1:2], v4, s[0:1]
; DEFAULT-NEXT:    v_cmp_lt_u32_e64 s[0:1], 14, v0
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    v_lshrrev_b32_e32 v5, 24, v2
; DEFAULT-NEXT:    v_lshrrev_b32_e32 v6, 16, v2
; DEFAULT-NEXT:    v_lshrrev_b32_e32 v7, 8, v2
; DEFAULT-NEXT:    v_lshrrev_b32_e32 v8, 24, v1
; DEFAULT-NEXT:    v_lshrrev_b32_e32 v9, 16, v1
; DEFAULT-NEXT:    v_lshrrev_b32_e32 v10, 8, v1
; DEFAULT-NEXT:    s_and_saveexec_b64 s[8:9], vcc
; DEFAULT-NEXT:    s_cbranch_execz .LBB10_2
; DEFAULT-NEXT:  ; %bb.1: ; %bb.1
; DEFAULT-NEXT:    global_load_dwordx2 v[3:4], v4, s[2:3]
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; DEFAULT-NEXT:    s_andn2_b64 s[0:1], s[0:1], exec
; DEFAULT-NEXT:    s_and_b64 s[2:3], vcc, exec
; DEFAULT-NEXT:    v_mov_b32_e32 v1, 1
; DEFAULT-NEXT:    v_mov_b32_e32 v10, 2
; DEFAULT-NEXT:    v_mov_b32_e32 v9, 3
; DEFAULT-NEXT:    v_mov_b32_e32 v8, 4
; DEFAULT-NEXT:    v_mov_b32_e32 v2, 5
; DEFAULT-NEXT:    v_mov_b32_e32 v7, 6
; DEFAULT-NEXT:    v_mov_b32_e32 v6, 7
; DEFAULT-NEXT:    v_mov_b32_e32 v5, 8
; DEFAULT-NEXT:    s_or_b64 s[0:1], s[0:1], s[2:3]
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    v_lshrrev_b32_e32 v16, 24, v4
; DEFAULT-NEXT:    v_lshrrev_b32_e32 v12, 16, v4
; DEFAULT-NEXT:    v_lshrrev_b32_e32 v15, 8, v4
; DEFAULT-NEXT:    v_lshrrev_b32_e32 v14, 24, v3
; DEFAULT-NEXT:    v_lshrrev_b32_e32 v11, 16, v3
; DEFAULT-NEXT:    v_lshrrev_b32_e32 v13, 8, v3
; DEFAULT-NEXT:  .LBB10_2: ; %Flow
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[8:9]
; DEFAULT-NEXT:    s_and_saveexec_b64 s[2:3], s[0:1]
; DEFAULT-NEXT:    s_cbranch_execz .LBB10_4
; DEFAULT-NEXT:  ; %bb.3: ; %bb.2
; DEFAULT-NEXT:    v_lshlrev_b16_e32 v3, 8, v10
; DEFAULT-NEXT:    v_lshlrev_b16_e32 v4, 8, v8
; DEFAULT-NEXT:    v_or_b32_sdwa v3, v1, v3 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_or_b32_sdwa v4, v9, v4 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_or_b32_sdwa v3, v3, v4 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_lshlrev_b16_e32 v4, 8, v7
; DEFAULT-NEXT:    v_lshlrev_b16_e32 v11, 8, v5
; DEFAULT-NEXT:    v_or_b32_sdwa v4, v2, v4 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_or_b32_sdwa v11, v6, v11 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_mov_b32_e32 v0, 0
; DEFAULT-NEXT:    v_or_b32_sdwa v4, v4, v11 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; DEFAULT-NEXT:    global_store_dwordx2 v0, v[3:4], s[4:5]
; DEFAULT-NEXT:    v_mov_b32_e32 v3, v1
; DEFAULT-NEXT:    v_mov_b32_e32 v13, v10
; DEFAULT-NEXT:    v_mov_b32_e32 v11, v9
; DEFAULT-NEXT:    v_mov_b32_e32 v14, v8
; DEFAULT-NEXT:    v_mov_b32_e32 v4, v2
; DEFAULT-NEXT:    v_mov_b32_e32 v15, v7
; DEFAULT-NEXT:    v_mov_b32_e32 v12, v6
; DEFAULT-NEXT:    v_mov_b32_e32 v16, v5
; DEFAULT-NEXT:  .LBB10_4: ; %bb.3
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[2:3]
; DEFAULT-NEXT:    v_lshlrev_b16_e32 v0, 8, v13
; DEFAULT-NEXT:    v_lshlrev_b16_e32 v1, 8, v14
; DEFAULT-NEXT:    v_or_b32_sdwa v0, v3, v0 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_or_b32_sdwa v1, v11, v1 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_or_b32_sdwa v0, v0, v1 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_lshlrev_b16_e32 v1, 8, v15
; DEFAULT-NEXT:    v_lshlrev_b16_e32 v3, 8, v16
; DEFAULT-NEXT:    v_or_b32_sdwa v1, v4, v1 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_or_b32_sdwa v3, v12, v3 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_mov_b32_e32 v2, 0
; DEFAULT-NEXT:    v_or_b32_sdwa v1, v1, v3 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:WORD_0 src1_sel:DWORD
; DEFAULT-NEXT:    global_store_dwordx2 v2, v[0:1], s[6:7]
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <8 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <8 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <8 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <8 x i8>, ptr addrspace(1) %gep2
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
bb.1:
  %cmp2 = icmp ult i32 %idx, 7
  br i1 %cmp2, label %bb.2, label %bb.3

bb.2:
  %tmp5 = phi <8 x i8> [ %vec1, %entry ], [<i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8>, %bb.1 ]
  store <8 x i8> %tmp5, ptr addrspace(1) %dst0, align 4
  br label %bb.3

bb.3:
  %tmp7 = phi <8 x i8> [ %vec2, %bb.1], [%tmp5, %bb.2]
  store <8 x i8> %tmp7, ptr addrspace(1) %dst1, align 4
  ret void
}

define amdgpu_kernel void @v8i8_multi_block(ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst0, ptr addrspace(1) nocapture %dst1) {
; GFX906-LABEL: v8i8_multi_block:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx8 s[0:7], s[0:1], 0x24
; GFX906-NEXT:    v_lshlrev_b32_e32 v6, 3, v0
; GFX906-NEXT:    v_mov_b32_e32 v5, 0
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dwordx2 v[3:4], v6, s[0:1]
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    v_mov_b32_e32 v1, v3
; GFX906-NEXT:    v_mov_b32_e32 v2, v4
; GFX906-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB11_4
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    global_load_dwordx2 v[1:2], v6, s[2:3]
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; GFX906-NEXT:    s_and_saveexec_b64 s[2:3], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB11_3
; GFX906-NEXT:  ; %bb.2: ; %bb.2
; GFX906-NEXT:    v_mov_b32_e32 v0, 0
; GFX906-NEXT:    global_store_dwordx2 v0, v[3:4], s[4:5]
; GFX906-NEXT:  .LBB11_3: ; %Flow
; GFX906-NEXT:    s_or_b64 exec, exec, s[2:3]
; GFX906-NEXT:  .LBB11_4: ; %bb.3
; GFX906-NEXT:    s_or_b64 exec, exec, s[0:1]
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    global_store_dwordx2 v5, v[1:2], s[6:7]
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: v8i8_multi_block:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dwordx8 s[0:7], s[0:1], 0x24
; FEATURE-NEXT:    v_lshlrev_b32_e32 v6, 3, v0
; FEATURE-NEXT:    v_mov_b32_e32 v5, 0
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_load_dwordx2 v[3:4], v6, s[0:1]
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    v_mov_b32_e32 v1, v3
; FEATURE-NEXT:    v_mov_b32_e32 v2, v4
; FEATURE-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; FEATURE-NEXT:    s_cbranch_execz .LBB11_4
; FEATURE-NEXT:  ; %bb.1: ; %bb.1
; FEATURE-NEXT:    global_load_dwordx2 v[1:2], v6, s[2:3]
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; FEATURE-NEXT:    s_and_saveexec_b64 s[2:3], vcc
; FEATURE-NEXT:    s_cbranch_execz .LBB11_3
; FEATURE-NEXT:  ; %bb.2: ; %bb.2
; FEATURE-NEXT:    v_mov_b32_e32 v0, 0
; FEATURE-NEXT:    global_store_dwordx2 v0, v[3:4], s[4:5]
; FEATURE-NEXT:  .LBB11_3: ; %Flow
; FEATURE-NEXT:    s_or_b64 exec, exec, s[2:3]
; FEATURE-NEXT:  .LBB11_4: ; %bb.3
; FEATURE-NEXT:    s_or_b64 exec, exec, s[0:1]
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    global_store_dwordx2 v5, v[1:2], s[6:7]
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: v8i8_multi_block:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dwordx8 s[0:7], s[0:1], 0x24
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v6, 3, v0
; DEFAULT-NEXT:    v_mov_b32_e32 v5, 0
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_load_dwordx2 v[3:4], v6, s[0:1]
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    v_mov_b32_e32 v1, v3
; DEFAULT-NEXT:    v_mov_b32_e32 v2, v4
; DEFAULT-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; DEFAULT-NEXT:    s_cbranch_execz .LBB11_4
; DEFAULT-NEXT:  ; %bb.1: ; %bb.1
; DEFAULT-NEXT:    global_load_dwordx2 v[1:2], v6, s[2:3]
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; DEFAULT-NEXT:    s_and_saveexec_b64 s[2:3], vcc
; DEFAULT-NEXT:    s_cbranch_execz .LBB11_3
; DEFAULT-NEXT:  ; %bb.2: ; %bb.2
; DEFAULT-NEXT:    v_mov_b32_e32 v0, 0
; DEFAULT-NEXT:    global_store_dwordx2 v0, v[3:4], s[4:5]
; DEFAULT-NEXT:  .LBB11_3: ; %Flow
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[2:3]
; DEFAULT-NEXT:  .LBB11_4: ; %bb.3
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[0:1]
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    global_store_dwordx2 v5, v[1:2], s[6:7]
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <8 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <8 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <8 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <8 x i8>, ptr addrspace(1) %gep2
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.3
bb.1:
  %cmp2 = icmp ult i32 %idx, 7
  br i1 %cmp2, label %bb.2, label %bb.3

bb.2:
  store <8 x i8> %vec1, ptr addrspace(1) %dst0, align 4
  br label %bb.3

bb.3:
  %tmp5 = phi <8 x i8> [ %vec1, %entry ], [ %vec2, %bb.1 ], [ %vec2, %bb.2]
  store <8 x i8> %tmp5, ptr addrspace(1) %dst1, align 4
  ret void
}

define amdgpu_kernel void @v32i8_loop_carried(ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst) {
; GFX906-LABEL: v32i8_loop_carried:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x24
; GFX906-NEXT:    v_lshlrev_b32_e32 v1, 5, v0
; GFX906-NEXT:    v_cmp_lt_u32_e32 vcc, 14, v0
; GFX906-NEXT:    s_mov_b32 s4, 0x2000604
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dword v1, v1, s[2:3]
; GFX906-NEXT:    s_mov_b64 s[2:3], 0
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    v_mov_b32_e32 v0, v1
; GFX906-NEXT:  .LBB12_1: ; %bb.1
; GFX906-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX906-NEXT:    s_and_b64 s[6:7], exec, vcc
; GFX906-NEXT:    s_or_b64 s[2:3], s[6:7], s[2:3]
; GFX906-NEXT:    v_perm_b32 v0, v1, v0, s4
; GFX906-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; GFX906-NEXT:    s_cbranch_execnz .LBB12_1
; GFX906-NEXT:  ; %bb.2: ; %bb.2.loopexit
; GFX906-NEXT:    s_or_b64 exec, exec, s[2:3]
; GFX906-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x34
; GFX906-NEXT:    v_mov_b32_e32 v1, 0
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_store_dword v1, v0, s[0:1]
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: v32i8_loop_carried:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x24
; FEATURE-NEXT:    v_lshlrev_b32_e32 v1, 5, v0
; FEATURE-NEXT:    v_cmp_lt_u32_e32 vcc, 14, v0
; FEATURE-NEXT:    s_mov_b32 s4, 0x2000604
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_load_dword v1, v1, s[2:3]
; FEATURE-NEXT:    s_mov_b64 s[2:3], 0
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    v_mov_b32_e32 v0, v1
; FEATURE-NEXT:  .LBB12_1: ; %bb.1
; FEATURE-NEXT:    ; =>This Inner Loop Header: Depth=1
; FEATURE-NEXT:    s_and_b64 s[6:7], exec, vcc
; FEATURE-NEXT:    s_or_b64 s[2:3], s[6:7], s[2:3]
; FEATURE-NEXT:    v_perm_b32 v0, v1, v0, s4
; FEATURE-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; FEATURE-NEXT:    s_cbranch_execnz .LBB12_1
; FEATURE-NEXT:  ; %bb.2: ; %bb.2.loopexit
; FEATURE-NEXT:    s_or_b64 exec, exec, s[2:3]
; FEATURE-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x34
; FEATURE-NEXT:    v_mov_b32_e32 v1, 0
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_store_dword v1, v0, s[0:1]
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: v32i8_loop_carried:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dwordx2 s[2:3], s[0:1], 0x24
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v1, 5, v0
; DEFAULT-NEXT:    v_cmp_lt_u32_e32 vcc, 14, v0
; DEFAULT-NEXT:    s_mov_b32 s4, 0x2000604
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_load_dword v1, v1, s[2:3]
; DEFAULT-NEXT:    s_mov_b64 s[2:3], 0
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    v_mov_b32_e32 v0, v1
; DEFAULT-NEXT:  .LBB12_1: ; %bb.1
; DEFAULT-NEXT:    ; =>This Inner Loop Header: Depth=1
; DEFAULT-NEXT:    s_and_b64 s[6:7], exec, vcc
; DEFAULT-NEXT:    s_or_b64 s[2:3], s[6:7], s[2:3]
; DEFAULT-NEXT:    v_perm_b32 v0, v1, v0, s4
; DEFAULT-NEXT:    s_andn2_b64 exec, exec, s[2:3]
; DEFAULT-NEXT:    s_cbranch_execnz .LBB12_1
; DEFAULT-NEXT:  ; %bb.2: ; %bb.2.loopexit
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[2:3]
; DEFAULT-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x34
; DEFAULT-NEXT:    v_mov_b32_e32 v1, 0
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_store_dword v1, v0, s[0:1]
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <32 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <4 x i8>, ptr addrspace(1) %gep1
  br label %bb.1

bb.1:
  %temp = phi <4 x i8> [ %vec1, %entry ], [ %vec2, %bb.1 ]
  %vec2 = shufflevector <4 x i8> %vec1, <4 x i8> %temp, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
  br label %bb.2

bb.2:
  store <4 x i8> %vec2, ptr addrspace(1) %dst, align 4
  ret void
}

; Should not have instances of "Instruction does not dominate all uses!"

define amdgpu_kernel void @v8i8_multiuse_multiblock(ptr addrspace(1) %src1, ptr addrspace(1) %src2, ptr addrspace(1) nocapture %dst1, ptr addrspace(1) nocapture %dst2, ptr addrspace(1) nocapture %dst3) {
; GFX906-LABEL: v8i8_multiuse_multiblock:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dwordx8 s[4:11], s[0:1], 0x24
; GFX906-NEXT:    v_lshlrev_b32_e32 v1, 3, v0
; GFX906-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x44
; GFX906-NEXT:    v_cmp_lt_u32_e64 s[2:3], 14, v0
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    global_load_dwordx2 v[1:2], v1, s[4:5]
; GFX906-NEXT:    s_waitcnt vmcnt(0)
; GFX906-NEXT:    v_lshrrev_b32_e32 v2, 16, v1
; GFX906-NEXT:    v_lshrrev_b16_e32 v3, 8, v1
; GFX906-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; GFX906-NEXT:    s_cbranch_execz .LBB13_2
; GFX906-NEXT:  ; %bb.1: ; %bb.1
; GFX906-NEXT:    v_lshlrev_b16_e32 v6, 8, v2
; GFX906-NEXT:    s_mov_b32 s6, 0x6070504
; GFX906-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; GFX906-NEXT:    v_and_b32_e32 v5, 0xffffff00, v1
; GFX906-NEXT:    v_or_b32_sdwa v6, v1, v6 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_and_b32_e32 v7, 0xffffff00, v2
; GFX906-NEXT:    v_perm_b32 v8, v1, v1, s6
; GFX906-NEXT:    s_andn2_b64 s[2:3], s[2:3], exec
; GFX906-NEXT:    s_and_b64 s[6:7], vcc, exec
; GFX906-NEXT:    v_mov_b32_e32 v4, 0
; GFX906-NEXT:    v_or_b32_sdwa v5, v1, v5 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_3 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v7, v1, v7 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_1 src1_sel:DWORD
; GFX906-NEXT:    v_and_b32_e32 v6, 0xffff, v6
; GFX906-NEXT:    s_or_b64 s[2:3], s[2:3], s[6:7]
; GFX906-NEXT:    v_or_b32_e32 v7, v6, v7
; GFX906-NEXT:    v_or_b32_e32 v5, v6, v5
; GFX906-NEXT:    global_store_dword v4, v1, s[8:9]
; GFX906-NEXT:    global_store_dword v4, v8, s[8:9] offset:8
; GFX906-NEXT:    global_store_dword v4, v7, s[8:9] offset:16
; GFX906-NEXT:    global_store_dword v4, v5, s[8:9] offset:24
; GFX906-NEXT:  .LBB13_2: ; %Flow
; GFX906-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX906-NEXT:    s_and_saveexec_b64 s[4:5], s[2:3]
; GFX906-NEXT:    s_cbranch_execz .LBB13_4
; GFX906-NEXT:  ; %bb.3: ; %bb.2
; GFX906-NEXT:    v_and_b32_e32 v5, 0xffffff00, v2
; GFX906-NEXT:    v_lshlrev_b16_e32 v4, 8, v2
; GFX906-NEXT:    v_or_b32_sdwa v5, v1, v5 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_and_b32_e32 v6, 0xffffff00, v1
; GFX906-NEXT:    s_mov_b32 s2, 0xc0c0001
; GFX906-NEXT:    v_or_b32_sdwa v4, v1, v4 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_1 src1_sel:DWORD
; GFX906-NEXT:    v_and_b32_e32 v5, 0xffff, v5
; GFX906-NEXT:    v_or_b32_sdwa v6, v2, v6 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_perm_b32 v9, 0, v2, s2
; GFX906-NEXT:    v_mov_b32_e32 v0, 0
; GFX906-NEXT:    v_or_b32_e32 v4, v5, v4
; GFX906-NEXT:    v_perm_b32 v7, 0, v1, s2
; GFX906-NEXT:    s_mov_b32 s3, 0xffff0000
; GFX906-NEXT:    v_or_b32_e32 v5, v5, v6
; GFX906-NEXT:    v_lshlrev_b32_e32 v6, 16, v9
; GFX906-NEXT:    v_and_or_b32 v8, v1, s3, v7
; GFX906-NEXT:    v_or_b32_e32 v6, v7, v6
; GFX906-NEXT:    global_store_dword v0, v4, s[10:11]
; GFX906-NEXT:    global_store_dword v0, v5, s[10:11] offset:8
; GFX906-NEXT:    global_store_dword v0, v8, s[10:11] offset:16
; GFX906-NEXT:    global_store_dword v0, v6, s[10:11] offset:24
; GFX906-NEXT:  .LBB13_4: ; %bb.3
; GFX906-NEXT:    s_or_b64 exec, exec, s[4:5]
; GFX906-NEXT:    v_lshlrev_b16_e32 v7, 8, v2
; GFX906-NEXT:    v_and_b32_e32 v4, 0xff, v1
; GFX906-NEXT:    v_and_b32_e32 v5, 0xffffff00, v2
; GFX906-NEXT:    v_or_b32_e32 v8, v3, v7
; GFX906-NEXT:    v_or_b32_sdwa v6, v4, v5 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; GFX906-NEXT:    v_and_b32_e32 v8, 0xffff, v8
; GFX906-NEXT:    v_lshlrev_b16_e32 v9, 8, v1
; GFX906-NEXT:    v_or_b32_e32 v3, v3, v5
; GFX906-NEXT:    v_mov_b32_e32 v0, 0
; GFX906-NEXT:    v_or_b32_e32 v6, v8, v6
; GFX906-NEXT:    v_or_b32_sdwa v2, v2, v9 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v4, v4, v7 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; GFX906-NEXT:    v_or_b32_sdwa v1, v1, v9 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_3 src1_sel:DWORD
; GFX906-NEXT:    v_and_b32_e32 v3, 0xffff, v3
; GFX906-NEXT:    v_or_b32_e32 v1, v8, v1
; GFX906-NEXT:    v_or_b32_e32 v4, v3, v4
; GFX906-NEXT:    v_or_b32_e32 v2, v3, v2
; GFX906-NEXT:    global_store_dword v0, v6, s[0:1]
; GFX906-NEXT:    global_store_dword v0, v1, s[0:1] offset:8
; GFX906-NEXT:    global_store_dword v0, v4, s[0:1] offset:16
; GFX906-NEXT:    global_store_dword v0, v2, s[0:1] offset:24
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: v8i8_multiuse_multiblock:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dwordx8 s[4:11], s[0:1], 0x24
; FEATURE-NEXT:    v_lshlrev_b32_e32 v1, 3, v0
; FEATURE-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x44
; FEATURE-NEXT:    v_cmp_lt_u32_e64 s[2:3], 14, v0
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    global_load_dwordx2 v[1:2], v1, s[4:5]
; FEATURE-NEXT:    s_waitcnt vmcnt(0)
; FEATURE-NEXT:    v_lshrrev_b32_e32 v2, 16, v1
; FEATURE-NEXT:    v_lshrrev_b16_e32 v3, 8, v1
; FEATURE-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; FEATURE-NEXT:    s_cbranch_execz .LBB13_2
; FEATURE-NEXT:  ; %bb.1: ; %bb.1
; FEATURE-NEXT:    v_lshlrev_b16_e32 v6, 8, v2
; FEATURE-NEXT:    s_mov_b32 s6, 0x6070504
; FEATURE-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; FEATURE-NEXT:    v_and_b32_e32 v5, 0xffffff00, v1
; FEATURE-NEXT:    v_or_b32_sdwa v6, v1, v6 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_and_b32_e32 v7, 0xffffff00, v2
; FEATURE-NEXT:    v_perm_b32 v8, v1, v1, s6
; FEATURE-NEXT:    s_andn2_b64 s[2:3], s[2:3], exec
; FEATURE-NEXT:    s_and_b64 s[6:7], vcc, exec
; FEATURE-NEXT:    v_mov_b32_e32 v4, 0
; FEATURE-NEXT:    v_or_b32_sdwa v5, v1, v5 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_3 src1_sel:DWORD
; FEATURE-NEXT:    v_or_b32_sdwa v7, v1, v7 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_1 src1_sel:DWORD
; FEATURE-NEXT:    v_and_b32_e32 v6, 0xffff, v6
; FEATURE-NEXT:    s_or_b64 s[2:3], s[2:3], s[6:7]
; FEATURE-NEXT:    v_or_b32_e32 v7, v6, v7
; FEATURE-NEXT:    v_or_b32_e32 v5, v6, v5
; FEATURE-NEXT:    global_store_dword v4, v1, s[8:9]
; FEATURE-NEXT:    global_store_dword v4, v8, s[8:9] offset:8
; FEATURE-NEXT:    global_store_dword v4, v7, s[8:9] offset:16
; FEATURE-NEXT:    global_store_dword v4, v5, s[8:9] offset:24
; FEATURE-NEXT:  .LBB13_2: ; %Flow
; FEATURE-NEXT:    s_or_b64 exec, exec, s[4:5]
; FEATURE-NEXT:    s_and_saveexec_b64 s[4:5], s[2:3]
; FEATURE-NEXT:    s_cbranch_execz .LBB13_4
; FEATURE-NEXT:  ; %bb.3: ; %bb.2
; FEATURE-NEXT:    v_and_b32_e32 v5, 0xffffff00, v2
; FEATURE-NEXT:    v_lshlrev_b16_e32 v4, 8, v2
; FEATURE-NEXT:    v_or_b32_sdwa v5, v1, v5 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_and_b32_e32 v6, 0xffffff00, v1
; FEATURE-NEXT:    s_mov_b32 s2, 0xc0c0001
; FEATURE-NEXT:    v_or_b32_sdwa v4, v1, v4 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_1 src1_sel:DWORD
; FEATURE-NEXT:    v_and_b32_e32 v5, 0xffff, v5
; FEATURE-NEXT:    v_or_b32_sdwa v6, v2, v6 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_perm_b32 v9, 0, v2, s2
; FEATURE-NEXT:    v_mov_b32_e32 v0, 0
; FEATURE-NEXT:    v_or_b32_e32 v4, v5, v4
; FEATURE-NEXT:    v_perm_b32 v7, 0, v1, s2
; FEATURE-NEXT:    s_mov_b32 s3, 0xffff0000
; FEATURE-NEXT:    v_or_b32_e32 v5, v5, v6
; FEATURE-NEXT:    v_lshlrev_b32_e32 v6, 16, v9
; FEATURE-NEXT:    v_and_or_b32 v8, v1, s3, v7
; FEATURE-NEXT:    v_or_b32_e32 v6, v7, v6
; FEATURE-NEXT:    global_store_dword v0, v4, s[10:11]
; FEATURE-NEXT:    global_store_dword v0, v5, s[10:11] offset:8
; FEATURE-NEXT:    global_store_dword v0, v8, s[10:11] offset:16
; FEATURE-NEXT:    global_store_dword v0, v6, s[10:11] offset:24
; FEATURE-NEXT:  .LBB13_4: ; %bb.3
; FEATURE-NEXT:    s_or_b64 exec, exec, s[4:5]
; FEATURE-NEXT:    v_lshlrev_b16_e32 v7, 8, v2
; FEATURE-NEXT:    v_and_b32_e32 v4, 0xff, v1
; FEATURE-NEXT:    v_and_b32_e32 v5, 0xffffff00, v2
; FEATURE-NEXT:    v_or_b32_e32 v8, v3, v7
; FEATURE-NEXT:    v_or_b32_sdwa v6, v4, v5 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; FEATURE-NEXT:    v_and_b32_e32 v8, 0xffff, v8
; FEATURE-NEXT:    v_lshlrev_b16_e32 v9, 8, v1
; FEATURE-NEXT:    v_or_b32_e32 v3, v3, v5
; FEATURE-NEXT:    v_mov_b32_e32 v0, 0
; FEATURE-NEXT:    v_or_b32_e32 v6, v8, v6
; FEATURE-NEXT:    v_or_b32_sdwa v2, v2, v9 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; FEATURE-NEXT:    v_or_b32_sdwa v4, v4, v7 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; FEATURE-NEXT:    v_or_b32_sdwa v1, v1, v9 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_3 src1_sel:DWORD
; FEATURE-NEXT:    v_and_b32_e32 v3, 0xffff, v3
; FEATURE-NEXT:    v_or_b32_e32 v1, v8, v1
; FEATURE-NEXT:    v_or_b32_e32 v4, v3, v4
; FEATURE-NEXT:    v_or_b32_e32 v2, v3, v2
; FEATURE-NEXT:    global_store_dword v0, v6, s[0:1]
; FEATURE-NEXT:    global_store_dword v0, v1, s[0:1] offset:8
; FEATURE-NEXT:    global_store_dword v0, v4, s[0:1] offset:16
; FEATURE-NEXT:    global_store_dword v0, v2, s[0:1] offset:24
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: v8i8_multiuse_multiblock:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dwordx8 s[4:11], s[0:1], 0x24
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v1, 3, v0
; DEFAULT-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x44
; DEFAULT-NEXT:    v_cmp_lt_u32_e64 s[2:3], 14, v0
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 15, v0
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    global_load_dwordx2 v[1:2], v1, s[4:5]
; DEFAULT-NEXT:    s_waitcnt vmcnt(0)
; DEFAULT-NEXT:    v_lshrrev_b32_e32 v2, 16, v1
; DEFAULT-NEXT:    v_lshrrev_b16_e32 v3, 8, v1
; DEFAULT-NEXT:    s_and_saveexec_b64 s[4:5], vcc
; DEFAULT-NEXT:    s_cbranch_execz .LBB13_2
; DEFAULT-NEXT:  ; %bb.1: ; %bb.1
; DEFAULT-NEXT:    v_lshlrev_b16_e32 v6, 8, v2
; DEFAULT-NEXT:    s_mov_b32 s6, 0x6070504
; DEFAULT-NEXT:    v_cmp_gt_u32_e32 vcc, 7, v0
; DEFAULT-NEXT:    v_and_b32_e32 v5, 0xffffff00, v1
; DEFAULT-NEXT:    v_or_b32_sdwa v6, v1, v6 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_and_b32_e32 v7, 0xffffff00, v2
; DEFAULT-NEXT:    v_perm_b32 v8, v1, v1, s6
; DEFAULT-NEXT:    s_andn2_b64 s[2:3], s[2:3], exec
; DEFAULT-NEXT:    s_and_b64 s[6:7], vcc, exec
; DEFAULT-NEXT:    v_mov_b32_e32 v4, 0
; DEFAULT-NEXT:    v_or_b32_sdwa v5, v1, v5 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_3 src1_sel:DWORD
; DEFAULT-NEXT:    v_or_b32_sdwa v7, v1, v7 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_1 src1_sel:DWORD
; DEFAULT-NEXT:    v_and_b32_e32 v6, 0xffff, v6
; DEFAULT-NEXT:    s_or_b64 s[2:3], s[2:3], s[6:7]
; DEFAULT-NEXT:    v_or_b32_e32 v7, v6, v7
; DEFAULT-NEXT:    v_or_b32_e32 v5, v6, v5
; DEFAULT-NEXT:    global_store_dword v4, v1, s[8:9]
; DEFAULT-NEXT:    global_store_dword v4, v8, s[8:9] offset:8
; DEFAULT-NEXT:    global_store_dword v4, v7, s[8:9] offset:16
; DEFAULT-NEXT:    global_store_dword v4, v5, s[8:9] offset:24
; DEFAULT-NEXT:  .LBB13_2: ; %Flow
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[4:5]
; DEFAULT-NEXT:    s_and_saveexec_b64 s[4:5], s[2:3]
; DEFAULT-NEXT:    s_cbranch_execz .LBB13_4
; DEFAULT-NEXT:  ; %bb.3: ; %bb.2
; DEFAULT-NEXT:    v_and_b32_e32 v5, 0xffffff00, v2
; DEFAULT-NEXT:    v_lshlrev_b16_e32 v4, 8, v2
; DEFAULT-NEXT:    v_or_b32_sdwa v5, v1, v5 dst_sel:DWORD dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_and_b32_e32 v6, 0xffffff00, v1
; DEFAULT-NEXT:    s_mov_b32 s2, 0xc0c0001
; DEFAULT-NEXT:    v_or_b32_sdwa v4, v1, v4 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_1 src1_sel:DWORD
; DEFAULT-NEXT:    v_and_b32_e32 v5, 0xffff, v5
; DEFAULT-NEXT:    v_or_b32_sdwa v6, v2, v6 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_perm_b32 v9, 0, v2, s2
; DEFAULT-NEXT:    v_mov_b32_e32 v0, 0
; DEFAULT-NEXT:    v_or_b32_e32 v4, v5, v4
; DEFAULT-NEXT:    v_perm_b32 v7, 0, v1, s2
; DEFAULT-NEXT:    s_mov_b32 s3, 0xffff0000
; DEFAULT-NEXT:    v_or_b32_e32 v5, v5, v6
; DEFAULT-NEXT:    v_lshlrev_b32_e32 v6, 16, v9
; DEFAULT-NEXT:    v_and_or_b32 v8, v1, s3, v7
; DEFAULT-NEXT:    v_or_b32_e32 v6, v7, v6
; DEFAULT-NEXT:    global_store_dword v0, v4, s[10:11]
; DEFAULT-NEXT:    global_store_dword v0, v5, s[10:11] offset:8
; DEFAULT-NEXT:    global_store_dword v0, v8, s[10:11] offset:16
; DEFAULT-NEXT:    global_store_dword v0, v6, s[10:11] offset:24
; DEFAULT-NEXT:  .LBB13_4: ; %bb.3
; DEFAULT-NEXT:    s_or_b64 exec, exec, s[4:5]
; DEFAULT-NEXT:    v_lshlrev_b16_e32 v7, 8, v2
; DEFAULT-NEXT:    v_and_b32_e32 v4, 0xff, v1
; DEFAULT-NEXT:    v_and_b32_e32 v5, 0xffffff00, v2
; DEFAULT-NEXT:    v_or_b32_e32 v8, v3, v7
; DEFAULT-NEXT:    v_or_b32_sdwa v6, v4, v5 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; DEFAULT-NEXT:    v_and_b32_e32 v8, 0xffff, v8
; DEFAULT-NEXT:    v_lshlrev_b16_e32 v9, 8, v1
; DEFAULT-NEXT:    v_or_b32_e32 v3, v3, v5
; DEFAULT-NEXT:    v_mov_b32_e32 v0, 0
; DEFAULT-NEXT:    v_or_b32_e32 v6, v8, v6
; DEFAULT-NEXT:    v_or_b32_sdwa v2, v2, v9 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_0 src1_sel:DWORD
; DEFAULT-NEXT:    v_or_b32_sdwa v4, v4, v7 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
; DEFAULT-NEXT:    v_or_b32_sdwa v1, v1, v9 dst_sel:WORD_1 dst_unused:UNUSED_PAD src0_sel:BYTE_3 src1_sel:DWORD
; DEFAULT-NEXT:    v_and_b32_e32 v3, 0xffff, v3
; DEFAULT-NEXT:    v_or_b32_e32 v1, v8, v1
; DEFAULT-NEXT:    v_or_b32_e32 v4, v3, v4
; DEFAULT-NEXT:    v_or_b32_e32 v2, v3, v2
; DEFAULT-NEXT:    global_store_dword v0, v6, s[0:1]
; DEFAULT-NEXT:    global_store_dword v0, v1, s[0:1] offset:8
; DEFAULT-NEXT:    global_store_dword v0, v4, s[0:1] offset:16
; DEFAULT-NEXT:    global_store_dword v0, v2, s[0:1] offset:24
; DEFAULT-NEXT:    s_endpgm
entry:
  %idx = call i32 @llvm.amdgcn.workitem.id.x()
  %gep1 = getelementptr <8 x i8>, ptr addrspace(1) %src1, i32 %idx
  %vec1 = load <8 x i8>, ptr addrspace(1) %gep1
  %gep2 = getelementptr <8 x i8>, ptr addrspace(1) %src2, i32 %idx
  %vec2 = load <8 x i8>, ptr addrspace(1) %gep2
  %cmp = icmp ult i32 %idx, 15
  br i1 %cmp, label %bb.1, label %bb.2
bb.1:
  %s1 = shufflevector <8 x i8> %vec1, <8 x i8> %vec2, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %s2 = shufflevector <8 x i8> %vec1, <8 x i8> %vec2, <4 x i32> <i32 0, i32 1, i32 3, i32 2>
  %s3 = shufflevector <8 x i8> %vec1, <8 x i8> %vec2, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  %s4 = shufflevector <8 x i8> %vec1, <8 x i8> %vec2, <4 x i32> <i32 0, i32 2, i32 3, i32 1>
  %gep4 = getelementptr ptr addrspace(1), ptr addrspace(1) %dst1, i32 0
  %gep5 = getelementptr ptr addrspace(1), ptr addrspace(1) %dst1, i32 1
  %gep6 = getelementptr ptr addrspace(1), ptr addrspace(1) %dst1, i32 2
  %gep7 = getelementptr ptr addrspace(1), ptr addrspace(1) %dst1, i32 3
  store <4 x i8> %s1, ptr addrspace(1) %gep4, align 4
  store <4 x i8> %s2, ptr addrspace(1) %gep5, align 4
  store <4 x i8> %s3, ptr addrspace(1) %gep6, align 4
  store <4 x i8> %s4, ptr addrspace(1) %gep7, align 4
  %cmp2 = icmp ult i32 %idx, 7
  br i1 %cmp2, label %bb.2, label %bb.3

bb.2:
  %s5 = shufflevector <8 x i8> %vec1, <8 x i8> %vec2, <4 x i32> <i32 0, i32 3, i32 1, i32 2>
  %s6 = shufflevector <8 x i8> %vec1, <8 x i8> %vec2, <4 x i32> <i32 0, i32 3, i32 2, i32 1>
  %s7 = shufflevector <8 x i8> %vec1, <8 x i8> %vec2, <4 x i32> <i32 1, i32 0, i32 2, i32 3>
  %s8 = shufflevector <8 x i8> %vec1, <8 x i8> %vec2, <4 x i32> <i32 1, i32 0, i32 3, i32 2>
  %gep8 = getelementptr ptr addrspace(1), ptr addrspace(1) %dst2, i32 0
  %gep9 = getelementptr ptr addrspace(1), ptr addrspace(1) %dst2, i32 1
  %gep10 = getelementptr ptr addrspace(1), ptr addrspace(1) %dst2, i32 2
  %gep11 = getelementptr ptr addrspace(1), ptr addrspace(1) %dst2, i32 3
  store <4 x i8> %s5, ptr addrspace(1) %gep8, align 4
  store <4 x i8> %s6, ptr addrspace(1) %gep9, align 4
  store <4 x i8> %s7, ptr addrspace(1) %gep10, align 4
  store <4 x i8> %s8, ptr addrspace(1) %gep11, align 4
  br label %bb.3

bb.3:
  %s9 = shufflevector <8 x i8> %vec1, <8 x i8> %vec2, <4 x i32> <i32 1, i32 2, i32 0, i32 3>
  %s10 = shufflevector <8 x i8> %vec1, <8 x i8> %vec2, <4 x i32> <i32 1, i32 2, i32 3, i32 0>
  %s11 = shufflevector <8 x i8> %vec1, <8 x i8> %vec2, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  %s12 = shufflevector <8 x i8> %vec1, <8 x i8> %vec2, <4 x i32> <i32 1, i32 3, i32 2, i32 0>
  %gep12 = getelementptr ptr addrspace(1), ptr addrspace(1) %dst3, i32 0
  %gep13 = getelementptr ptr addrspace(1), ptr addrspace(1) %dst3, i32 1
  %gep14 = getelementptr ptr addrspace(1), ptr addrspace(1) %dst3, i32 2
  %gep15 = getelementptr ptr addrspace(1), ptr addrspace(1) %dst3, i32 3
  store <4 x i8> %s9, ptr addrspace(1) %gep12, align 4
  store <4 x i8> %s10, ptr addrspace(1) %gep13, align 4
  store <4 x i8> %s11, ptr addrspace(1) %gep14, align 4
  store <4 x i8> %s12, ptr addrspace(1) %gep15, align 4
  ret void
}

; This should not cause Assertion `getType() == V->getType() && "All operands to PHI node must be the same type as the PHI node
; Note: whether or not the assertion fires depends on the iteration ortder of PhiNodes in AMDGPULateCodeGenPrepare, which
; is non-deterministic due to iterators over a set of pointers.

define amdgpu_kernel void @MissingInc_PhiChain(i1 %cmp1.i.i.i.i.i.not, <16 x i8> %promotealloca31.i.i.i.i) {
; GFX906-LABEL: MissingInc_PhiChain:
; GFX906:       ; %bb.0: ; %entry
; GFX906-NEXT:    s_load_dword s0, s[0:1], 0x24
; GFX906-NEXT:    s_waitcnt lgkmcnt(0)
; GFX906-NEXT:    s_bitcmp1_b32 s0, 0
; GFX906-NEXT:    s_cselect_b64 s[2:3], -1, 0
; GFX906-NEXT:    s_xor_b64 s[0:1], s[2:3], -1
; GFX906-NEXT:    v_cndmask_b32_e64 v0, 0, 1, s[0:1]
; GFX906-NEXT:    v_cmp_ne_u32_e64 s[0:1], 1, v0
; GFX906-NEXT:    s_branch .LBB14_2
; GFX906-NEXT:  .LBB14_1: ; %Flow1
; GFX906-NEXT:    ; in Loop: Header=BB14_2 Depth=1
; GFX906-NEXT:    s_and_b64 vcc, exec, s[4:5]
; GFX906-NEXT:    s_cbranch_vccnz .LBB14_6
; GFX906-NEXT:  .LBB14_2: ; %for.body10.i.i.i.i
; GFX906-NEXT:    ; =>This Inner Loop Header: Depth=1
; GFX906-NEXT:    s_and_b64 vcc, exec, s[0:1]
; GFX906-NEXT:    s_mov_b64 s[4:5], s[2:3]
; GFX906-NEXT:    s_cbranch_vccnz .LBB14_4
; GFX906-NEXT:  ; %bb.3: ; %if.then.i.i.i.i.i
; GFX906-NEXT:    ; in Loop: Header=BB14_2 Depth=1
; GFX906-NEXT:    s_mov_b64 s[4:5], -1
; GFX906-NEXT:  .LBB14_4: ; %Flow
; GFX906-NEXT:    ; in Loop: Header=BB14_2 Depth=1
; GFX906-NEXT:    s_andn2_b64 vcc, exec, s[4:5]
; GFX906-NEXT:    s_mov_b64 s[4:5], -1
; GFX906-NEXT:    s_cbranch_vccnz .LBB14_1
; GFX906-NEXT:  ; %bb.5: ; %if.end.i.i.i.i.i
; GFX906-NEXT:    ; in Loop: Header=BB14_2 Depth=1
; GFX906-NEXT:    s_mov_b64 s[4:5], 0
; GFX906-NEXT:    s_and_b64 vcc, exec, s[0:1]
; GFX906-NEXT:    s_branch .LBB14_1
; GFX906-NEXT:  .LBB14_6: ; %DummyReturnBlock
; GFX906-NEXT:    s_endpgm
; FEATURE-LABEL: MissingInc_PhiChain:
; FEATURE:       ; %bb.0: ; %entry
; FEATURE-NEXT:    s_load_dword s0, s[0:1], 0x24
; FEATURE-NEXT:    s_waitcnt lgkmcnt(0)
; FEATURE-NEXT:    s_bitcmp1_b32 s0, 0
; FEATURE-NEXT:    s_cselect_b64 s[2:3], -1, 0
; FEATURE-NEXT:    s_xor_b64 s[0:1], s[2:3], -1
; FEATURE-NEXT:    v_cndmask_b32_e64 v0, 0, 1, s[0:1]
; FEATURE-NEXT:    v_cmp_ne_u32_e64 s[0:1], 1, v0
; FEATURE-NEXT:    s_branch .LBB14_2
; FEATURE-NEXT:  .LBB14_1: ; %Flow1
; FEATURE-NEXT:    ; in Loop: Header=BB14_2 Depth=1
; FEATURE-NEXT:    s_and_b64 vcc, exec, s[4:5]
; FEATURE-NEXT:    s_cbranch_vccnz .LBB14_6
; FEATURE-NEXT:  .LBB14_2: ; %for.body10.i.i.i.i
; FEATURE-NEXT:    ; =>This Inner Loop Header: Depth=1
; FEATURE-NEXT:    s_and_b64 vcc, exec, s[0:1]
; FEATURE-NEXT:    s_mov_b64 s[4:5], s[2:3]
; FEATURE-NEXT:    s_cbranch_vccnz .LBB14_4
; FEATURE-NEXT:  ; %bb.3: ; %if.then.i.i.i.i.i
; FEATURE-NEXT:    ; in Loop: Header=BB14_2 Depth=1
; FEATURE-NEXT:    s_mov_b64 s[4:5], -1
; FEATURE-NEXT:  .LBB14_4: ; %Flow
; FEATURE-NEXT:    ; in Loop: Header=BB14_2 Depth=1
; FEATURE-NEXT:    s_andn2_b64 vcc, exec, s[4:5]
; FEATURE-NEXT:    s_mov_b64 s[4:5], -1
; FEATURE-NEXT:    s_cbranch_vccnz .LBB14_1
; FEATURE-NEXT:  ; %bb.5: ; %if.end.i.i.i.i.i
; FEATURE-NEXT:    ; in Loop: Header=BB14_2 Depth=1
; FEATURE-NEXT:    s_mov_b64 s[4:5], 0
; FEATURE-NEXT:    s_and_b64 vcc, exec, s[0:1]
; FEATURE-NEXT:    s_branch .LBB14_1
; FEATURE-NEXT:  .LBB14_6: ; %DummyReturnBlock
; FEATURE-NEXT:    s_endpgm
;
; DEFAULT-LABEL: MissingInc_PhiChain:
; DEFAULT:       ; %bb.0: ; %entry
; DEFAULT-NEXT:    s_load_dword s0, s[0:1], 0x24
; DEFAULT-NEXT:    s_waitcnt lgkmcnt(0)
; DEFAULT-NEXT:    s_bitcmp1_b32 s0, 0
; DEFAULT-NEXT:    s_cselect_b64 s[2:3], -1, 0
; DEFAULT-NEXT:    s_xor_b64 s[0:1], s[2:3], -1
; DEFAULT-NEXT:    v_cndmask_b32_e64 v0, 0, 1, s[0:1]
; DEFAULT-NEXT:    v_cmp_ne_u32_e64 s[0:1], 1, v0
; DEFAULT-NEXT:    s_branch .LBB14_2
; DEFAULT-NEXT:  .LBB14_1: ; %Flow1
; DEFAULT-NEXT:    ; in Loop: Header=BB14_2 Depth=1
; DEFAULT-NEXT:    s_and_b64 vcc, exec, s[4:5]
; DEFAULT-NEXT:    s_cbranch_vccnz .LBB14_6
; DEFAULT-NEXT:  .LBB14_2: ; %for.body10.i.i.i.i
; DEFAULT-NEXT:    ; =>This Inner Loop Header: Depth=1
; DEFAULT-NEXT:    s_and_b64 vcc, exec, s[0:1]
; DEFAULT-NEXT:    s_mov_b64 s[4:5], s[2:3]
; DEFAULT-NEXT:    s_cbranch_vccnz .LBB14_4
; DEFAULT-NEXT:  ; %bb.3: ; %if.then.i.i.i.i.i
; DEFAULT-NEXT:    ; in Loop: Header=BB14_2 Depth=1
; DEFAULT-NEXT:    s_mov_b64 s[4:5], -1
; DEFAULT-NEXT:  .LBB14_4: ; %Flow
; DEFAULT-NEXT:    ; in Loop: Header=BB14_2 Depth=1
; DEFAULT-NEXT:    s_andn2_b64 vcc, exec, s[4:5]
; DEFAULT-NEXT:    s_mov_b64 s[4:5], -1
; DEFAULT-NEXT:    s_cbranch_vccnz .LBB14_1
; DEFAULT-NEXT:  ; %bb.5: ; %if.end.i.i.i.i.i
; DEFAULT-NEXT:    ; in Loop: Header=BB14_2 Depth=1
; DEFAULT-NEXT:    s_mov_b64 s[4:5], 0
; DEFAULT-NEXT:    s_and_b64 vcc, exec, s[0:1]
; DEFAULT-NEXT:    s_branch .LBB14_1
; DEFAULT-NEXT:  .LBB14_6: ; %DummyReturnBlock
; DEFAULT-NEXT:    s_endpgm
entry:
  br label %for.body10.i.i.i.i

for.body10.i.i.i.i:                               ; preds = %if.end.1.i.i.i.i.i, %entry
  %promotealloca3237.i.i.i.i = phi <16 x i8> [ <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, %entry ], [ %1, %if.end.1.i.i.i.i.i ]
  br i1 %cmp1.i.i.i.i.i.not, label %if.end.i.i.i.i.i, label %if.then.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %for.body10.i.i.i.i
  %0 = insertelement <16 x i8> %promotealloca3237.i.i.i.i, i8 0, i64 0
  br label %if.end.i.i.i.i.i

if.end.i.i.i.i.i:                                 ; preds = %if.then.i.i.i.i.i, %for.body10.i.i.i.i
  %promotealloca31.i.i.i.i3 = phi <16 x i8> [ %0, %if.then.i.i.i.i.i ], [ %promotealloca3237.i.i.i.i, %for.body10.i.i.i.i ]
  br i1 %cmp1.i.i.i.i.i.not, label %if.end.1.i.i.i.i.i, label %if.then.1.i.i.i.i.i

if.then.1.i.i.i.i.i:                              ; preds = %if.end.i.i.i.i.i
  br label %if.end.1.i.i.i.i.i

if.end.1.i.i.i.i.i:                               ; preds = %if.then.1.i.i.i.i.i, %if.end.i.i.i.i.i
  %promotealloca30.i.i.i.i = phi <16 x i8> [ %promotealloca31.i.i.i.i, %if.then.1.i.i.i.i.i ], [ %promotealloca31.i.i.i.i3, %if.end.i.i.i.i.i ]
  %1 = shufflevector <16 x i8> %promotealloca30.i.i.i.i, <16 x i8> zeroinitializer, <16 x i32> <i32 0, i32 1, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  br label %for.body10.i.i.i.i
}


declare i32 @llvm.amdgcn.workitem.id.x()
